{
  "common": {
    "close": "Close",
    "cancel": "Cancel",
    "save": "Save",
    "add": "Add",
    "delete": "Delete",
    "install": "Install",
    "update": "Update",
    "refresh": "Refresh",
    "reload": "Reload",
    "choose": "Choose Folder",
    "swap": "Swap Sides",
    "next": "Next",
    "back": "Back",
    "send": "Send",
    "sending": "Sending...",
    "copy": "Copy",
    "generate": "Generate Commit Message",
    "check": "Check Coding Rules",
    "commit": "Commit Code",
    "noData": "No data available",
    "skip": "Skip",
    "finish": "Finish",
    "startTour": "Start",
    "dontShowAgain": "Don't show again",
    "revert": "Revert",
    "name": "Name",
    "path": "Path",
    "browse": "Browse"
  },
  "message": {
    "commitMessageWarning": "Please enter a commit message",
    "commitMessageRequired": "Commit message is required",
    "noFilesWarning": "No files selected!",
    "pathsRequired": "Please select path",
    "loading": "Loading...",
    "noIssues": "No issues found",
    "selectIssue": "Select an issue to view details",
    "noFilesChanged": "No files were changed or added since the last commit.",
    "rowSelected": "{{0}} of {{1}} row(s) selected.",
    "aiContentWarning": "This content was generated by AI and may not be fully accurate. Please carefully verify it before committing."
  },
  "title": {
    "settings": "Settings",
    "about": "About",
    "checkForUpdate": "Check For Updates",
    "checkForUpdate1": "New update available! ({{0}})",
    "contact": "Contact",
    "updateSvn": "SVN (Current revision: {{0}})",
    "updateSvn1": "New SVN revision available! ({{0}}) - (Current: {{1}})",
    "cleanSvn": "Clean SVN",
    "mergeSvn": "Merge SVN",
    "showLogsSvn": "Show Logs SVN",
    "supportFeedback": "Support & Feedback",
    "historyCommitMessage": "Commit Message History",
    "startTour": "Start Application Tour"
  },
  "label": {
    "line": "Ln",
    "column": "Col"
  },
  "table": {
    "status": "Status",
    "filePath": "File path",
    "extension": "Extension",
    "severity": "Severity",
    "issue": "Issue",
    "line": "Line",
    "type": "Type",
    "message": "Message",
    "category": "Category",
    "priority": "Priority",
    "rank": "Rank",
    "location": "Location",
    "file": "File",
    "class": "Class",
    "method": "Method"
  },
  "placeholder": {
    "commitMessage": "Enter commit message...",
    "referenceId": "Reference ID (e.g. No.344)",
    "search": "Search",
    "selectLanguage": "Select language...",
    "noLanguage": "No language found."
  },
  "toast": {
    "success": "Success",
    "error": "Error",
    "info": "Info",
    "warning": "Warning",
    "getListSuccess": "Get changed files successful",
    "commitSuccess": "Commit successful",
    "commitError": "Commit error",
    "checkSuccess": "Analysis successful",
    "checkError": "Analysis error",
    "generateSuccess": "Commit message generated successfully",
    "generateError": "Commit message generation error",
    "updateAvailable": "New update available!",
    "isLatestVersion": "Everything's up to date.",
    "checkUpdates": "Check for Updates",
    "updatingMessage": "Updating SVN...",
    "updateSuccess": "SVN updated successfully",
    "updateError": "Error updating SVN",
    "dryRunSuccess": "Dry run completed successfully",
    "dryRunError": "Error during dry run",
    "mergeSuccess": "Merge completed successfully",
    "mergeError": "Error during merge",
    "mergeConflicts": "Merge conflicts detected",
    "resolveConflictError": "Error resolving conflicts",
    "updatingMultiple": "Updating {{count}} files...",
    "updatingSingle": "Updating file {{file}}...",
    "spotbugsError": "Error running SpotBugs: {{0}}",
    "spotbugsSuccess": "SpotBugs analysis completed: {{0}} issues found",
    "refreshingSpotbugs": "Refreshing SpotBugs analysis...",
    "leastOneJavaFile": "Please select at least one Java file",
    "fileSaved": "File saved successfully.",
    "errorSavingFile": "Error saving file.",
    "fetchHistoryError": "Error fetching commit history",
    "copied": "Copied to clipboard!",
    "loadSuccess": "Load successfully.",
    "configSaved": "Saved.",
    "configSaveFailed": "Saved failed."
  },
  "joyride": {
    "titlebar": {
      "settings": "Open the settings dialog to configure application preferences like theme, language, and API keys.",
      "about": "View information about the application, including version and developer details.",
      "support": "Open the support and feedback dialog to submit requests or suggestions.",
      "history": "View the history of generated commit messages.",
      "appUpdate": "Check for application updates. A red dot indicates a new version is downloaded and ready to install.",
      "svnUpdate": "Check for SVN updates in your working copy. A red dot indicates new revisions are available.",
      "svnClean": "Open the SVN cleanup dialog to manage your working copy.",
      "svnLog": "Show the SVN log history for the current working copy.",
      "startTour": "A quick guide to help you get familiar with the main features. Click 'Start' to begin using the app with ease!"
    },
    "main": {
      "step1": "This table displays files that have been changed, added, or deleted in your SVN working copy. Select the files you want to include in your commit.",
      "referenceId": "Enter a reference ID for your commit. This will be included at the beginning of your commit message (e.g., No.344).",
      "step2": "This area is for your commit message. You can write it manually or generate one using AI.",
      "step3": "Click this button to generate a commit message based on the selected file changes using AI.",
      "step4": "Click this button to check the selected files against predefined coding rules.",
      "step5": "Click this button to run SpotBugs analysis on the selected Java files.",
      "step6": "Click this button to commit the selected files with the provided commit message to the SVN repository."
    },
    "settings": {
      "appearanceTab": "Appearance Tab: Customize the look and feel, including language, theme, dark mode, fonts, and button styles.",
      "language": "Language: Select your preferred language for the application interface.",
      "theme": "Theme: Choose a color theme for the application.",
      "darkMode": "Dark Mode: Toggle between light and dark themes.",
      "fontFamily": "Font Family: Select the font style for the application.",
      "fontSize": "Font Size: Adjust the text size (Small, Medium, Large).",
      "buttonVariant": "Button Variant: Choose the style for buttons (Default, Destructive, Outline, Secondary, Ghost, Link).",
      "configurationTab": "Configuration Tab: Set up essential settings like API keys, folder paths, and integrations.",
      "openaiApiKey": "OpenAI API Key: Enter your key for AI features like commit message generation.",
      "svnFolder": "SVN Folder: Specify the path to your main SVN working copy.",
      "sourceFolder": "Source Folder: Specify the path to your project's source code folder (used for analysis tools like SpotBugs).",
      "emailPL": "Email PL: Enter the email address of the Project Leader for notifications.",
      "webhookMS": "Webhook MS: Select or add a Microsoft Teams webhook URL for sending notifications.",
      "mailserverTab": "Mail Server Tab: Configure SMTP settings for sending email notifications.",
      "smtpServer": "SMTP Server: Enter the address of your SMTP server (e.g., smtp.example.com).",
      "port": "Port: Enter the port number for the SMTP server (e.g., 587).",
      "mailEmail": "Email: Enter the email address to send notifications from.",
      "mailPassword": "Password: Enter the password for the email account.",
      "onedriveTab": "OneDrive Tab: Configure Microsoft OneDrive credentials for uploading images (e.g., for feedback attachments).",
      "onedriveClientId": "Client ID: Enter your Microsoft App Client ID.",
      "onedriveClientSecret": "Client Secret: Enter your Microsoft App Client Secret.",
      "onedriveRefreshToken": "Refresh Token: Enter your OneDrive Refresh Token (obtained separately) for persistent access.",
      "startOnLogin": "Auto-start SVNTool: Enable this option to launch SVNTool automatically when your computer starts.",
      "showNotifications": "Show window notifications: Toggle this to receive visual notifications for SVN activity and app updates within the app window."
    }
  },
  "svn": {
    "status": {
      "added": "Added",
      "modified": "Modified",
      "deleted": "Deleted",
      "replaced": "Replaced",
      "conflicted": "Conflicted",
      "external": "External",
      "ignored": "Ignored",
      "unversioned": "Unversioned",
      "missing": "Missing",
      "typeChanged": "Type Changed"
    }
  },
  "settings": {
    "fontSize": {
      "title": "Font Size",
      "small": "Small",
      "medium": "Medium",
      "large": "Large"
    },
    "theme": "Theme",
    "darkMode": "Dark Mode",
    "language": "Language",
    "buttonVariant": "Button Variant",
    "fontFamily": "Font Family",
    "description": "Customize your application settings.",
    "tab": {
      "appearance": "Appearance",
      "configuration": "Configuration",
      "mailserver": "Mail Server",
      "onedrive": "OneDrive"
    },
    "configuration": {
      "description": "Configure your project settings.",
      "openaiApiKey": "OpenAI API Key",
      "openaiApiKeyPlaceholder": "Enter your OpenAI API key",
      "svnFolder": "SVN Folder",
      "svnFolderPlaceholder": "Select the folder containing svn.exe",
      "selectSourceFolder": "Select Source Folder",
      "sourceFolder": "Source Folder",
      "sourceFolderPlaceholder": "Select your source folder",
      "chooseFolder": "Choose folder",
      "emailPL": "Email PL",
      "emailPlaceholder": "Enter email address",
      "webhookMS": "Webhook MS",
      "selectWebhook": "Select Webhook",
      "addNewWebhook": "Add New Webhook",
      "startOnLogin": "Auto-start SVNTool",
      "showNotifications": "Show window notifications",
      "selectCodingRule": "Select Coding Rule",
      "receiveTeamsNotification": "Send Microsoft Teams notifications",
      "receiveMailNotification": "Send email notifications"
    },
    "mailserver": {
      "description": "Configure your mail server settings.",
      "smtpServer": "SMTP Server",
      "smtpServerPlaceholder": "Enter your SMTP server",
      "port": "Port",
      "portPlaceholder": "Enter SMTP port",
      "email": "Email",
      "emailPlaceholder": "Enter your email address",
      "password": "Password",
      "passwordPlaceholder": "Enter your password"
    },
    "onedrive": {
      "description": "Configure Microsoft OneDrive for image uploads.",
      "clientId": "Client ID",
      "clientIdPlaceholder": "Enter your Microsoft App Client ID",
      "clientSecret": "Client Secret",
      "clientSecretPlaceholder": "Enter your Microsoft App Client Secret",
      "refreshToken": "Refresh Token (Optional)",
      "refreshTokenPlaceholder": "Enter your Refresh Token (if available)"
    }
  },
  "dialog": {
    "mergeSvn": {
      "title": "Merge SVN",
      "description": "Merge revisions from one folder to another within the same SVN repository",
      "sourcePath": "Source Path",
      "targetPath": "Target Path",
      "revision": "Revision",
      "createBackup": "Create backup before merge",
      "backupEnabled": "Backup enabled",
      "backupDisabled": "Backup disabled",
      "checkMerge": "Check Merge",
      "performMerge": "Perform Merge",
      "dryRunResult": "Dry Run Result",
      "commits": "Commit List",
      "noCommits": "No commits to merge",
      "changedFiles": "Changed Files",
      "noChangedFiles": "No files changed",
      "commitMessage": "Commit Message",
      "conflictFiles": "Conflict Files",
      "selectConflict": "Select a conflict file to view",
      "binaryFile": "Cannot display binary file content",
      "working": "Working",
      "base": "Base",
      "mine": "Mine",
      "theirs": "Theirs",
      "diff": "Diff",
      "useWorking": "Use Working",
      "useMine": "Use Mine",
      "useTheirs": "Use Theirs",
      "useBase": "Use Base",
      "tabs": {
        "setup": "Setup",
        "preview": "Preview",
        "conflicts": "Conflicts",
        "complete": "Complete"
      }
    },
    "aboutDialog": {
      "title": "SVN Tool",
      "description": "This application is developed to assist in generating meaningful commit messages from SVN diffs and enforce coding standards.",
      "developer": "Developer",
      "version": "Version",
      "email": "Email",
      "thankYou": "Thank you for using this tool!",
      "sourceCode": "Source Code"
    },
    "codingRules": {
      "title": "Coding Rules Analysis",
      "refresh": "Refresh",
      "noResults": "No analysis results yet."
    },
    "cleanSvn": {
      "title": "SVN Cleanup Options",
      "description": "Select cleanup options for your working copy:",
      "options": {
        "externals": {
          "label": "Clean up externals",
          "description": "Also clean up externals"
        },
        "unversioned": {
          "label": "Delete unversioned files and directories",
          "description": "Delete all unversioned files and directories from working copy"
        },
        "ignored": {
          "label": "Delete ignored files and directories",
          "description": "Delete all ignored files and directories from working copy"
        },
        "unused": {
          "label": "Delete unused pristine copies",
          "description": "Delete all pristine copies of files that are not referenced in the working copy"
        },
        "metadata": {
          "label": "Clean up working copy status",
          "description": "Refresh the status of the working copy"
        },
        "locks": {
          "label": "Break locks",
          "description": "Break and steal any locks in working copy"
        },
        "fixTimestamps": {
          "label": "Fix timestamps",
          "description": "Fix timestamps of working copy files"
        }
      },
      "clean": "Clean",
      "cleanSuccess": "SVN cleanup completed successfully",
      "cleanError": "Error during cleanup"
    },
    "statisticSvn": {
      "title": "Statistics",
      "description": "Track statistics and charts of SVN commit activities by date, author, and contribution rate, making it easier to manage and evaluate project progress.",
      "tabs": {
        "commitByDate": "Commits by Date",
        "commitByAuthor": "Commits by Author",
        "authorship": "Authorship Rate",
        "summary": "Summary Table"
      },
      "commitByDate": {
        "cardTitle": "Commits Over Time",
        "cardDescription": "Chart of commit counts by date",
        "selectChartType": "Select a chart type",
        "chartTypes": {
          "barMultiple": "Bar Chart - Multiple",
          "barHorizontal": "Bar Chart - Horizontal",
          "barStacked": "Bar Chart - Stacked",
          "lineMultiple": "Line Chart - Multiple",
          "areaMultiple": "Area Chart - Multiple"
        }
      },
      "commitByAuthor": {
        "cardTitle": "Commits by Author",
        "cardDescription": "Chart of commit counts by author",
        "chartTypes": {
          "barVertical": "Bar Chart - Vertical",
          "barHorizontal": "Bar Chart - Horizontal"
        }
      },
      "authorship": {
        "title": "Author Contribution Rate",
        "cardTitle": "Contribution Rate by Author",
        "cardDescription": "Author contribution rate"
      },
      "summary": {
        "title": "Summary Table",
        "author": "Author",
        "commitCount": "Commit Count",
        "percentage": "Percentage",
        "total": "Total"
      },
      "cardFooter": "Commit data for the selected period",
      "errorLoading": "Error loading statistics data"
    },
    "spotbugs": {
      "title": "SpotBugs Analysis",
      "filesAnalyzed": "Files Analyzed",
      "totalIssues": "Total Issues",
      "high": "High",
      "medium": "Medium",
      "low": "Low",
      "allIssues": "All Issues",
      "issues": "Issues",
      "bugSummary": "Bug Summary",
      "bugDetails": "Bug Details",
      "location": "Location",
      "methodLocation": "Method Location",
      "methods": "Methods",
      "lines": "Lines",
      "sourceLines": "Source Line",
      "localVariables": "Local Variables",
      "properties": "Properties",
      "name": "Name",
      "value": "Value",
      "notAvailable": "N/A",
      "static": "STATIC",
      "primary": "PRIMARY",
      "fileList": "File List",
      "chart": "Chart",
      "bugCount": "Count",
      "priorityChart": "Bug Count by Priority",
      "priorityChartDescription": "Displays the distribution of bugs based on their priority levels.",
      "fileStatsChart": "Bug Count by File",
      "fileStatsChartDescription": "Shows the number of bugs found in each file within the project.",
      "packageStatsChart": "Bug Count by Package",
      "packageStatsChartDescription": "Displays the distribution of bugs across different packages in the project.",
      "aiAssistant": "AI Assistant",
      "ai": {
        "title": "AI Assistant",
        "description": "Explaining error in file: {{file}}, line: {{line}}, type: {{type}}.",
        "explainButton": "Explain this error",
        "customQueryLabel": "Custom question about this bug",
        "customQueryPlaceholder": "E.g., How to fix this issue in best practice?",
        "sendQueryButton": "Send question",
        "responseTitle": "AI Response"
      }
    },
    "diffViewer": {
      "title": "Diff Viewer",
      "language": {
        "select": "Select language...",
        "notFound": "No language found."
      }
    },
    "showLogs": {
      "title": "SVN Log",
      "titleWithPath": "SVN Log: {{0}}",
      "commitMessage": "Commit message",
      "changedFiles": "Changed Files",
      "revision": "Revision",
      "date": "Date",
      "author": "Author",
      "action": "Action",
      "message": "Message",
      "path": "Path",
      "placeholderSearch": "Search for revision, author, message...",
      "totalEntries": "{{0}} total entries",
      "page": "Page {{0}} of {{1}}"
    },
    "supportFeedback": {
      "title": "Support & Feedback",
      "description": "Submit a support request or provide feedback.",
      "typeLabel": "Type",
      "typePlaceholder": "Select type",
      "typeSupport": "Support Request",
      "typeFeedback": "Feedback",
      "emailLabel": "Email",
      "emailPlaceholder": "Enter your email address",
      "messageLabel": "Message",
      "messagePlaceholder": "Enter your message",
      "validationWarning": "Please fill in Email field",
      "sendSuccess": "Your message has been sent successfully!",
      "sendError": "Failed to send message. Please try again later or check your webhook configuration.",
      "basicInfoTitle": "Basic Information",
      "messageTitle": "Message",
      "imagesTitle": "Attach Images",
      "dragImages": "Drag and drop images here, or click to select files",
      "dropHere": "Drop the images here...",
      "imageLimit": "Maximum 5 images, 5MB each",
      "tooManyImages": "You can upload a maximum of 5 images",
      "onlyImages": "Only image files are allowed"
    },
    "updateSvn": {
      "title": "Last Changed Info",
      "author": "Author: ",
      "revision": "Revision: ",
      "curRevision": "Current: ",
      "date": "Date: ",
      "changedFiles": "Changed Files",
      "action": "Action",
      "path": "Path",
      "commitMessage": "Commit Message",
      "description": "A new SVN revision has been detected. Please update your working copy from revision [{{1}}] to the latest revision [{{0}}] to ensure you have the most recent changes."
    },
    "updateApp": {
      "title": "New Update Available",
      "appVersion": "A new version of SVNTool is available: ",
      "message": "The app will relaunch after updating",
      "description": "There's a new update for this app. Upgrade now to get the most recent features and fixes."
    },
    "newWebhook": {
      "title": "Add New Webhook",
      "description": "Enter a name and URL for the webhook you'd like to add.",
      "msgRequiredName": "Webhook name is required.",
      "msgRequiredUrl": "Webhook URL is required.",
      "placeholderName": "Enter webhook name",
      "placeholderUrl": "Enter webhook URL"
    },
    "commitMessageHistroy": {
      "title": "Commit Message History",
      "noResults": "No results yet.",
      "date": "Date",
      "commitMessage": "Commit Message"
    },
    "revert": {
      "title": "Revert Changes",
      "description": "Are you sure you want to revert the selected files? This action cannot be undone."
    },
    "update": {
      "title": "Update Files",
      "description": "Are you sure you want to update the selected files to the latest revision? This will overwrite any local changes."
    },
    "editSourceFolder": "Edit Source Folder",
    "addSourceFolder": "Add Source Folder",
    "editSourceFolderDesc": "Update the details for the source folder.",
    "addSourceFolderDesc": "Enter the details for the new source folder.",
    "newCodingRule": {
      "title": "Add New Coding Rule",
      "msgRequiredName": "Rule name is required.",
      "msgRequiredContent": "Coding rules content is required."
    }
  },
  "welcome": {
    "title": "Welcome to SVN Tool!",
    "description": "It looks like this is your first time using the application. Would you like to take a quick tour to learn about the main features?"
  },
  "spotbugs": {
    "categoryDescriptions": {
      "badPractice": "Violations of recommended and essential coding practice. Examples include hash code and equals problems, cloneable idiom, dropped exceptions, Serializable problems, and misuse of finalize. We strive to make this analysis accurate, although some groups may not care about some of the bad practices.",
      "correctness": "Probable bug - an apparent coding mistake resulting in code that was probably not what the developer intended. We strive for a low false positive rate.",
      "experimental": "Experimental and not fully vetted bug patterns",
      "i18N": "Code flaws having to do with internationalization and locale",
      "maliciousCode": "Code that is vulnerable to attacks from untrusted code",
      "mtCorrectness": "Code flaws having to do with threads, locks, and volatiles",
      "noise": "Bogus random noise: intended to be useful as a control in data mining experiments, not in finding actual bugs in software",
      "performance": "Code that is not necessarily incorrect but may be inefficient",
      "security": "A use of untrusted input in a way that could create a remotely exploitable security vulnerability.",
      "style": "Code that is confusing, anomalous, or written in a way that leads itself to errors. Examples include dead local stores, switch fall through, unconfirmed casts, and redundant null check of value known to be null. More false positives accepted. In previous versions of SpotBugs, this category was known as Style."
    },
    "bugDescriptions": {
      "jua_dont_assert_instanceof_in_tests": "JUA: Asserting value of instanceof in tests is not recommended.\nAsserting type checks in tests is not recommended as a class cast exception message could better indicate the cause of an instance of the wrong class being used than an instanceof assertion.\n\nWhen debugging tests that fail due to bad casts, it may be more useful to observe the output of the resulting ClassCastException which could provide information about the actual encountered type. Asserting the type before casting would instead result in a less informative 'false is not true' message.\n\nIf JUnit is used with hamcrest, the IsInstanceOf class from hamcrest could be used instead.",
      "aa_assertion_of_arguments": "AA: Assertion is used to validate an argument of a public method\nAssertions must not be used to validate arguments of public methods because the validations are not performed if assertions are disabled.\n\nSee SEI CERT rule MET01-J. Never use assertions to validate method arguments and CWE-617: Reachable Assertion for more information.",
      "ct_constructor_throw": "CT: Be wary of letting constructors throw exceptions.\nClasses that throw exceptions in their constructors are vulnerable to Finalizer attacks\n\nA finalizer attack can be prevented, by declaring the class final, using an empty finalizer declared as final, or by a clever use of a private constructor.\n\nSee SEI CERT Rule OBJ-11 for more information.",
      "cnt_rough_constant_value": "CNT: Rough value of known constant found\nIt's recommended to use the predefined library constant for code clarity and better precision.\n\nSee CWE-1106: Insufficient Use of Symbolic Constants.<\\p>",
      "np_boolean_return_null": "NP: Method with Boolean return type returns explicit null\nA method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen. This method can be invoked as though it returned a value of type boolean, and the compiler will insert automatic unboxing of the Boolean value. If a null value is returned, this will result in a NullPointerException.",
      "sw_swing_methods_invoked_in_swing_thread": "SW: Certain swing methods need to be invoked in Swing thread\n(From JDC Tech Tip): The Swing methods show(), setVisible(), and pack() will create the associated peer for the frame. With the creation of the peer, the system creates the event dispatch thread. This makes things problematic because the event dispatch thread could be notifying listeners while pack and validate are still processing. This situation could result in two threads going through the Swing component-based GUI -- it's a serious flaw that could result in deadlocks or other related threading issues. A pack call causes components to be realized. As they are being realized (that is, not necessarily visible), they could trigger listener notification on the event dispatch thread.",
      "fi_finalizer_only_nulls_fields": "FI: Finalizer only nulls fields\nThis finalizer does nothing except null out fields. This is completely pointless, and requires that the object be garbage collected, finalized, and then garbage collected again. You should just remove the finalize method.",
      "fi_finalizer_nulls_fields": "FI: Finalizer nulls fields\nThis finalizer nulls out fields. This is usually an error, as it does not aid garbage collection, and the object is going to be garbage collected anyway.",
      "ui_inheritance_unsafe_getresource": "UI: Usage of GetResource may be unsafe if class is extended\nCalling this.getClass().getResource(...) could give results other than expected if this class is extended by a class in another package.",
      "am_creates_empty_zip_file_entry": "AM: Creates an empty zip file entry\nThe code calls putNextEntry(), immediately followed by a call to closeEntry(). This results in an empty ZipFile entry. The contents of the entry should be written to the ZipFile between the calls to putNextEntry() and closeEntry().",
      "am_creates_empty_jar_file_entry": "AM: Creates an empty jar file entry\nThe code calls putNextEntry(), immediately followed by a call to closeEntry(). This results in an empty JarFile entry. The contents of the entry should be written to the JarFile between the calls to putNextEntry() and closeEntry().",
      "imse_dont_catch_imse": "IMSE: Dubious catching of IllegalMonitorStateException\nIllegalMonitorStateException is generally only thrown in case of a design flaw in your code (calling wait or notify on an object you do not hold a lock on).",
      "cn_implements_clone_but_not_cloneable": "CN: Class defines clone() but doesn't implement Cloneable\nThis class defines a clone() method but the class doesn't implement Cloneable. There are some situations in which this is OK (e.g., you want to control how subclasses can clone themselves), but just make sure that this is what you intended.",
      "cn_idiom": "CN: Class implements Cloneable but does not define or use clone method\nClass implements Cloneable but does not define or use the clone method.",
      "cn_idiom_no_super_call": "CN: clone method does not call super.clone()\nThis non-final class defines a clone() method that does not call super.clone(). If this class ('A') is extended by a subclass ('B'), and the subclass B calls super.clone(), then it is likely that B's clone() method will return an object of type A, which violates the standard contract for clone().\n\nIf all clone() methods call super.clone(), then they are guaranteed to use Object.clone(), which always returns an object of the correct type.\n\nSee CWE-580: clone() Method Without super.clone().",
      "de_might_drop": "DE: Method might drop exception\nThis method might drop an exception.  In general, exceptions should be handled or reported in some way, or they should be thrown out of the method.\n\nSee CWE-754: Improper Check for Unusual or Exceptional Conditions.",
      "de_might_ignore": "DE: Method might ignore exception\nThis method might ignore an exception.  In general, exceptions should be handled or reported in some way, or they should be thrown out of the method.\n\nSee CWE-754: Improper Check for Unusual or Exceptional Conditions.",
      "dm_exit": "Dm: Method invokes System.exit(…)\nInvoking System.exit shuts down the entire Java virtual machine. This should only been done when it is appropriate. Such calls make it hard or impossible for your code to be invoked by other code. Consider throwing a RuntimeException instead.\n\nSee CWE-382: J2EE Bad Practices: Use of System.exit().",
      "nm_future_keyword_used_as_identifier": "Nm: Use of identifier that is a keyword in later versions of Java\nThe identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed in order to compile it in later versions of Java.",
      "nm_future_keyword_used_as_member_identifier": "Nm: Use of identifier that is a keyword in later versions of Java\nThis identifier is used as a keyword in later versions of Java. This code, and any code that references this API, will need to be changed in order to compile it in later versions of Java.",
      "jcip_field_isnt_final_in_immutable_class": "JCIP: Fields of immutable classes should be final\nThe class is annotated with net.jcip.annotations.Immutable or javax.annotation.concurrent.Immutable, and the rules for those annotations require that all fields are final.\n\nSee CWE-471: Modification of Assumed-Immutable Data (MAID).",
      "dm_run_finalizers_on_exit": "Dm: Method invokes dangerous method runFinalizersOnExit\nNever call System.runFinalizersOnExit or Runtime.runFinalizersOnExit for any reason: they are among the most dangerous methods in the Java libraries. -- Joshua Bloch",
      "np_equals_should_handle_null_argument": "NP: equals() method does not check for null argument\nThis implementation of equals(Object) violates the contract defined by java.lang.Object.equals() because it does not check for null being passed as the argument. All equals() methods should return false if passed a null value.",
      "fi_empty": "FI: Empty finalizer should be deleted\nEmpty finalize() methods are useless, so they should be deleted.\n\nSee CWE-568: finalize() Method Without super.finalize().",
      "fi_nullify_super": "FI: Finalizer nullifies superclass finalizer\nThis empty finalize() method explicitly negates the effect of any finalizer defined by its superclass.  Any finalizer actions defined for the superclass will not be performed.  Unless this is intended, delete this method.\n\nSee CWE-568: finalize() Method Without super.finalize().",
      "fi_useless": "FI: Finalizer does nothing but call superclass finalizer\nThe only thing this finalize() method does is call the superclass's finalize() method, making it redundant.  Delete it.",
      "fi_missing_super_call": "FI: Finalizer does not call superclass finalizer\nThis finalize() method does not make a call to its superclass's finalize() method.  So, any finalizer actions defined for the superclass will not be performed.  Add a call to super.finalize().\n\nSee CWE-568: finalize() Method Without super.finalize().",
      "fi_explicit_invocation": "FI: Explicit invocation of finalizer\nThis method contains an explicit invocation of the finalize() method on an object.  Because finalizer methods are supposed to be executed once, and only by the VM, this is a bad idea.\n\nIf a connected set of objects beings finalizable, then the VM will invoke the finalize method on all the finalizable object, possibly at the same time in different threads. Thus, it is a particularly bad idea, in the finalize method for a class X, invoke finalize on objects referenced by X, because they may already be getting finalized in a separate thread.\n\nSee CWE-586: Explicit Call to Finalize().",
      "eq_check_for_operand_not_compatible_with_this": "Eq: Equals checks for incompatible operand\nThis equals method is checking to see if the argument is some incompatible type (i.e., a class that is neither a supertype nor subtype of the class that defines the equals method). For example, the Foo class might have an equals method that looks like:\n\npublic boolean equals(Object o) {\n    if (o instanceof Foo)\n        return name.equals(((Foo)o).name);\n    else if (o instanceof String)\n        return name.equals(o);\n    else return false;\n}\nThis is considered bad practice, as it makes it very hard to implement an equals method that is symmetric and transitive. Without those properties, very unexpected behaviors are possible.",
      "eq_getclass_and_class_constant": "Eq: equals method fails for subtypes\nThis class has an equals method that will be broken if it is inherited by subclasses. It compares a class literal with the class of the argument (e.g., in class Foo it might check if Foo.class == o.getClass()). It is better to check if this.getClass() == o.getClass().\n\nSee CWE-486: Comparison of Classes by Name.",
      "eq_self_no_object": "Eq: Covariant equals() method defined\nThis class defines a covariant version of equals().  To correctly override the equals() method in java.lang.Object, the parameter of equals() must have type java.lang.Object.",
      "co_self_no_object": "Co: Covariant compareTo() method defined\nThis class defines a covariant version of compareTo().  To correctly override the compareTo() method in the Comparable interface, the parameter of compareTo() must have type java.lang.Object.",
      "co_compareto_results_min_value": "Co: compareTo()/compare() returns Integer.MIN_VALUE\nIn some situation, this compareTo or compare method returns the constant Integer.MIN_VALUE, which is an exceptionally bad practice. The only thing that matters about the return value of compareTo is the sign of the result. But people will sometimes negate the return value of compareTo, expecting that this will negate the sign of the result. And it will, except in the case where the value returned is Integer.MIN_VALUE. So just return -1 rather than Integer.MIN_VALUE.",
      "co_compareto_incorrect_floating": "Co: compareTo()/compare() incorrectly handles float or double value\nThis method compares double or float values using pattern like this: val1 > val2 ? 1 : val1 < val2 ? -1 : 0. This pattern works incorrectly for -0.0 and NaN values which may result in incorrect sorting result or broken collection (if compared values are used as keys). Consider using Double.compare or Float.compare static methods which handle all the special cases correctly.",
      "rv_negating_result_of_compareto": "RV: Negating the result of compareTo()/compare()\nThis code negates the return value of a compareTo or compare method. This is a questionable or bad programming practice, since if the return value is Integer.MIN_VALUE, negating the return value won't negate the sign of the result. You can achieve the same intended result by reversing the order of the operands rather than by negating the results.",
      "es_comparing_strings_with_eq": "ES: Comparison of String objects using == or !=\nThis code compares java.lang.String objects for reference equality using the == or != operators. Unless both strings are either constants in a source file, or have been interned using the String.intern() method, the same string value may be represented by two different String objects. Consider using the equals(Object) method instead.\n\nSee CWE-595: Comparison of Object References Instead of Object Contents.",
      "es_comparing_parameter_string_with_eq": "ES: Comparison of String parameter using == or !=\nThis code compares a java.lang.String parameter for reference equality using the == or != operators. Requiring callers to pass only String constants or interned strings to a method is unnecessarily fragile, and rarely leads to measurable performance gains. Consider using the equals(Object) method instead.\n\nSee CWE-595: Comparison of Object References Instead of Object Contents.",
      "eq_compareto_use_object_equals": "Eq: Class defines compareTo(…) and uses Object.equals()\nThis class defines a compareTo(...) method but inherits its equals() method from java.lang.Object. Generally, the value of compareTo should return zero if and only if equals returns true. If this is violated, weird and unpredictable failures will occur in classes such as PriorityQueue. In Java 5 the PriorityQueue.remove method uses the compareTo method, while in Java 6 it uses the equals method.\n\nFrom the JavaDoc for the compareTo method in the Comparable interface:\n\nIt is strongly recommended, but not strictly required that (x.compareTo(y)==0) == (x.equals(y)). Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact. The recommended language is 'Note: this class has a natural ordering that is inconsistent with equals.'",
      "he_hashcode_use_object_equals": "HE: Class defines hashCode() and uses Object.equals()\nThis class defines a hashCode() method but inherits its equals() method from java.lang.Object (which defines equality by comparing object references).  Although this will probably satisfy the contract that equal objects must have equal hashcodes, it is probably not what was intended by overriding the hashCode() method.  (Overriding hashCode() implies that the object's identity is based on criteria more complicated than simple reference equality.)\n\nIf you don't think instances of this class will ever be inserted into a HashMap/HashTable, the recommended hashCode implementation to use is:\n\npublic int hashCode() {\n    assert false : 'hashCode not designed';\n    return 42; // any arbitrary constant will do\n}\nSee CWE-581: Object Model Violation: Just One of Equals and Hashcode Defined.",
      "he_hashcode_no_equals": "HE: Class defines hashCode() but not equals()\nThis class defines a hashCode() method but not an equals() method.  Therefore, the class may violate the invariant that equal objects must have equal hashcodes.\n\nSee CWE-581: Object Model Violation: Just One of Equals and Hashcode Defined.",
      "he_equals_use_hashcode": "HE: Class defines equals() and uses Object.hashCode()\nThis class overrides equals(Object), but does not override hashCode(), and inherits the implementation of hashCode() from java.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).  Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes.\n\nIf you don't think instances of this class will ever be inserted into a HashMap/HashTable, the recommended hashCode implementation to use is:\n\npublic int hashCode() {\n    assert false : 'hashCode not designed';\n    return 42; // any arbitrary constant will do\n}\nSee CWE-581: Object Model Violation: Just One of Equals and Hashcode Defined.",
      "he_inherits_equals_use_hashcode": "HE: Class inherits equals() and uses Object.hashCode()\nThis class inherits equals(Object) from an abstract superclass, and hashCode() from java.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).  Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes.\n\nIf you don't want to define a hashCode method, and/or don't believe the object will ever be put into a HashMap/Hashtable, define the hashCode() method to throw UnsupportedOperationException.\n\nSee CWE-581: Object Model Violation: Just One of Equals and Hashcode Defined.",
      "he_equals_no_hashcode": "HE: Class defines equals() but not hashCode()\nThis class overrides equals(Object), but does not override hashCode().  Therefore, the class may violate the invariant that equal objects must have equal hashcodes.\n\nSee CWE-581: Object Model Violation: Just One of Equals and Hashcode Defined.",
      "eq_abstract_self": "Eq: Abstract class defines covariant equals() method\nThis class defines a covariant version of equals().  To correctly override the equals() method in java.lang.Object, the parameter of equals() must have type java.lang.Object.",
      "co_abstract_self": "Co: Abstract class defines covariant compareTo() method\nThis class defines a covariant version of compareTo().  To correctly override the compareTo() method in the Comparable interface, the parameter of compareTo() must have type java.lang.Object.",
      "ic_superclass_uses_subclass_during_initialization": "IC: Superclass uses subclass during initialization\nDuring the initialization of a class, the class makes an active use of a subclass. That subclass will not yet be initialized at the time of this use. For example, in the following code, foo will be null.\n\npublic class CircularClassInitialization {\n    static class InnerClassSingleton extends CircularClassInitialization {\n        static InnerClassSingleton singleton = new InnerClassSingleton();\n    }\n\n    static CircularClassInitialization foo = InnerClassSingleton.singleton;\n}\nSee CWE-457: Use of Uninitialized Variable.",
      "si_instance_before_finals_assigned": "SI: Static initializer creates instance before all static final fields assigned\nThe class's static initializer creates an instance of the class before all of the static final fields are assigned.",
      "it_no_such_element": "It: Iterator next() method cannot throw NoSuchElementException\nThis class implements the java.util.Iterator interface.  However, its next() method is not capable of throwing java.util.NoSuchElementException.  The next() method should be changed so it throws NoSuchElementException if is called when there are no more elements to return.",
      "me_mutable_enum_field": "ME: Enum field is public and mutable\nA mutable public field is defined inside a public enum, thus can be changed by malicious code or by accident from another package. Though mutable enum fields may be used for lazy initialization, it's a bad practice to expose them to the outer world. Consider declaring this field final and/or package-private.",
      "me_enum_field_setter": "ME: Public enum method unconditionally sets its field\nThis public method declared in public enum unconditionally sets enum field, thus this field can be changed by malicious code or by accident from another package. Though mutable enum fields may be used for lazy initialization, it's a bad practice to expose them to the outer world. Consider removing this method or declaring it package-private.",
      "nm_method_naming_convention": "Nm: Method names should start with a lower case letter\nMethods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.",
      "nm_field_naming_convention": "Nm: Non-final field names should start with a lower case letter, final fields should be uppercase with words separated by underscores\nNames of fields that are not final should be in mixed case with a lowercase first letter and the first letters of subsequent words capitalized. Names of final fields should be all uppercase with words separated by underscores ('_').",
      "nm_same_simple_name_as_interface": "Nm: Class names shouldn't shadow simple name of implemented interface\nThis class/interface has a simple name that is identical to that of an implemented/extended interface, except that the interface is in a different package (e.g., alpha.Foo extends beta.Foo). This can be exceptionally confusing, create lots of situations in which you have to look at import statements to resolve references and creates many opportunities to accidentally define methods that do not override methods in their superclasses.",
      "nm_same_simple_name_as_superclass": "Nm: Class names shouldn't shadow simple name of superclass\nThis class has a simple name that is identical to that of its superclass, except that its superclass is in a different package (e.g., alpha.Foo extends beta.Foo). This can be exceptionally confusing, create lots of situations in which you have to look at import statements to resolve references and creates many opportunities to accidentally define methods that do not override methods in their superclasses.",
      "nm_class_naming_convention": "Nm: Class names should start with an upper case letter\nClass names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML).",
      "nm_very_confusing_intentional": "Nm: Very confusing method names (but perhaps intentional)\nThe referenced methods have names that differ only by capitalization. This is very confusing because if the capitalization were identical then one of the methods would override the other. From the existence of other methods, it seems that the existence of both of these methods is intentional, but is sure is confusing. You should try hard to eliminate one of them, unless you are forced to have both due to frozen APIs.",
      "nm_wrong_package_intentional": "Nm: Method doesn't override method in superclass due to wrong package for parameter\nThe method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match the type of the corresponding parameter in the superclass. For example, if you have:\n\nimport alpha.Foo;\n\npublic class A {\n    public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\n\npublic class B extends A {\n    public int f(Foo x) { return 42; }\n    public int f(alpha.Foo x) { return 27; }\n}\nThe f(Foo) method defined in class B doesn't override the f(Foo) method defined in class A, because the argument types are Foo's from different packages.\n\nIn this case, the subclass does define a method with a signature identical to the method in the superclass, so this is presumably understood. However, such methods are exceptionally confusing. You should strongly consider removing or deprecating the method with the similar but not identical signature.",
      "nm_confusing": "Nm: Confusing method names\nThe referenced methods have names that differ only by capitalization.",
      "nm_class_not_exception": "Nm: Class is not derived from an Exception, even though it is named as such\nThis class is not derived from another exception, but ends with 'Exception'. This will be confusing to users of this class.",
      "rr_not_checked": "RR: Method ignores results of InputStream.read()\nThis method ignores the return value of one of the variants of java.io.InputStream.read() which can return multiple bytes.  If the return value is not checked, the caller will not be able to correctly handle the case where fewer bytes were read than the caller requested.  This is a particularly insidious kind of bug, because in many programs, reads from input streams usually do read the full amount of data requested, causing the program to fail only sporadically.\n\nSee CWE-252: Unchecked Return Value.",
      "sr_not_checked": "RR: Method ignores results of InputStream.skip()\nThis method ignores the return value of java.io.InputStream.skip() which can skip multiple bytes.  If the return value is not checked, the caller will not be able to correctly handle the case where fewer bytes were skipped than the caller requested.  This is a particularly insidious kind of bug, because in many programs, skips from input streams usually do skip the full amount of data requested, causing the program to fail only sporadically. With Buffered streams, however, skip() will only skip data in the buffer, and will routinely fail to skip the requested number of bytes.\n\nSee CWE-252: Unchecked Return Value.",
      "se_no_suitable_constructor": "Se: Class is Serializable but its superclass doesn't define a void constructor\nThis class implements the Serializable interface and its superclass does not. When such an object is deserialized, the fields of the superclass need to be initialized by invoking the void constructor of the superclass. Since the superclass does not have one, serialization and deserialization will fail at runtime.",
      "se_no_suitable_constructor_for_externalization": "Se: Class is Externalizable but doesn't define a void constructor\nThis class implements the Externalizable interface, but does not define a public void constructor. When Externalizable objects are deserialized, they first need to be constructed by invoking the public void constructor. Since this class does not have one, serialization and deserialization will fail at runtime.",
      "se_comparator_should_be_serializable": "Se: Comparator doesn't implement Serializable\nThis class implements the Comparator interface. You should consider whether or not it should also implement the Serializable interface. If a comparator is used to construct an ordered collection such as a TreeMap, then the TreeMap will be serializable only if the comparator is also serializable. As most comparators have little or no state, making them serializable is generally easy and good defensive programming.\n\nSee CWE-1066: Missing Serialization Control Element.",
      "se_no_serialversionid": "SnVI: Class is Serializable, but doesn't define serialVersionUID\nThis class implements the Serializable interface, but does not define a serialVersionUID field.  A change as simple as adding a reference to a .class object will add synthetic fields to the class, which will unfortunately change the implicit serialVersionUID (e.g., adding a reference to String.class will generate a static field class$java$lang$String). Also, different source code to bytecode compilers may use different naming conventions for synthetic variables generated for references to class objects or inner classes. To ensure interoperability of Serializable across versions, consider adding an explicit serialVersionUID.",
      "se_read_resolve_must_return_object": "Se: The readResolve method must be declared with a return type of Object.\nIn order for the readResolve method to be recognized by the serialization mechanism, it must be declared to have a return type of Object.",
      "se_transient_field_not_restored": "Se: Transient field that isn't set by deserialization.\nThis class contains a field that is updated at multiple places in the class, thus it seems to be part of the state of the class. However, since the field is marked as transient and not set in readObject or readResolve, it will contain the default value in any deserialized instance of the class.",
      "se_prevent_ext_obj_overwrite": "Se: Prevent overwriting of externalizable objects\nThe readExternal() method must be declared as public and is not protected from malicious callers, so the code permits any caller to reset the value of the object at any time.\n\nTo prevent overwriting of externalizable objects, you can use a Boolean flag that is set after the instance fields have been populated. You can also protect against race conditions by synchronizing on a private lock object.",
      "se_nonfinal_serialversionid": "Se: serialVersionUID isn't final\nThis class defines a serialVersionUID field that is not final.  The field should be made final if it is intended to specify the version UID for purposes of serialization.",
      "se_nonstatic_serialversionid": "Se: serialVersionUID isn't static\nThis class defines a serialVersionUID field that is not static.  The field should be made static if it is intended to specify the version UID for purposes of serialization.",
      "se_nonlong_serialversionid": "Se: serialVersionUID isn't long\nThis class defines a serialVersionUID field that is not long.  The field should be made long if it is intended to specify the version UID for purposes of serialization.",
      "se_bad_field": "Se: Non-transient non-serializable instance field in serializable class\nThis Serializable class defines a non-primitive instance field which is neither transient, Serializable, or java.lang.Object, and does not appear to implement the Externalizable interface or the readObject() and writeObject() methods.  Objects of this class will not be deserialized correctly if a non-Serializable object is stored in this field.",
      "se_inner_class": "Se: Serializable inner class\nThis Serializable class is an inner class. Any attempt to serialize it will also serialize the associated outer instance. The outer instance is serializable, so this won't fail, but it might serialize a lot more data than intended. If possible, making the inner class a static inner class (also known as a nested class) should solve the problem.",
      "se_bad_field_inner_class": "Se: Non-serializable class has a serializable inner class\nThis Serializable class is an inner class of a non-serializable class. Thus, attempts to serialize it will also attempt to associate instance of the outer class with which it is associated, leading to a runtime error.\n\nIf possible, making the inner class a static inner class should solve the problem. Making the outer class serializable might also work, but that would mean serializing an instance of the inner class would always also serialize the instance of the outer class, which it often not what you really want.",
      "se_bad_field_store": "Se: Non-serializable value stored into instance field of a serializable class\nA non-serializable value is stored into a non-transient field of a serializable class.",
      "rv_return_value_ignored_bad_practice": "RV: Method ignores exceptional return value\nThis method returns a value that is not checked. The return value should be checked since it can indicate an unusual or unexpected function execution. For example, the File.delete() method returns false if the file could not be successfully deleted (rather than throwing an Exception). If you don't check the result, you won't notice if the method invocation signals unexpected behavior by returning an atypical return value.\n\nSee CWE-253: Incorrect Check of Function Return Value.",
      "np_tostring_could_return_null": "NP: toString method may return null\nThis toString method seems to return null in some circumstances. A liberal reading of the spec could be interpreted as allowing this, but it is probably a bad idea and could cause other code to break. Return the empty string or some other appropriate string rather than null.",
      "np_clone_could_return_null": "NP: Clone method may return null\nThis clone method seems to return null in some circumstances, but clone is never allowed to return a null value. If you are convinced this path is unreachable, throw an AssertionError instead.",
      "os_open_stream": "OS: Method may fail to close stream\nThe method creates an IO stream object, does not assign it to any fields, pass it to other methods that might close it, or return it, and does not appear to close the stream on all paths out of the method.  This may result in a file descriptor leak.  It is generally a good idea to use a finally block to ensure that streams are closed.\n\nSee CWE-459: Incomplete Cleanup.",
      "os_open_stream_exception_path": "OS: Method may fail to close stream on exception\nThe method creates an IO stream object, does not assign it to any fields, pass it to other methods, or return it, and does not appear to close it on all possible exception paths out of the method.  This may result in a file descriptor leak.  It is generally a good idea to use a finally block to ensure that streams are closed.\n\nSee CWE-459: Incomplete Cleanup.",
      "rc_ref_comparison_bad_practice": "RC: Suspicious reference comparison to constant\nThis method compares a reference value to a constant using the == or != operator, where the correct way to compare instances of this type is generally with the equals() method. It is possible to create distinct instances that are equal but do not compare as == since they are different objects. Examples of classes which should generally not be compared by reference are java.lang.Integer, java.lang.Float, etc.\n\nSee CWE-595: Comparison of Object References Instead of Object Contents.",
      "rc_ref_comparison_bad_practice_boolean": "RC: Suspicious reference comparison of Boolean values\nThis method compares two Boolean values using the == or != operator. Normally, there are only two Boolean values (Boolean.TRUE and Boolean.FALSE), but it is possible to create other Boolean objects using the new Boolean(b) constructor. It is best to avoid such objects, but if they do exist, then checking Boolean objects for equality using == or != will give results than are different than you would get using .equals(...).\n\nSee CWE-595: Comparison of Object References Instead of Object Contents.",
      "va_format_string_uses_newline": "FS: Format string should use %n rather than n\nThis format string includes a newline character (\\n). In format strings, it is generally preferable to use %n, which will produce the platform-specific line separator. When using text blocks introduced in Java 15, use the \\ escape sequence: String value = ''' first line%n\\ second line%n\\ ''';",
      "fs_bad_date_format_flag_combo": "FS: Date-format strings may lead to unexpected behavior\nThis format string includes a bad combination of flags which may lead to unexpected behavior. Potential bad combinations include the following:\n\nusing a week year ('Y') with month in year ('M') and day in month ('d') without specifying week in year ('w'). Flag ('y') may be preferable here instead\nusing an AM/PM hour ('h' or 'K') without specifying an AM/PM marker ('a') or period of day marker ('B')\nusing a 24-hour format hour ('H' or 'k') with specifying AM/PM or period of day markers\nusing a milli of day ('A') together with hours ('H', 'h', 'K', 'k') and/or minutes ('m') and/or seconds ('s')\nuse of milli of day ('A') and nano of day ('N') together\nuse of fraction of second ('S') nano of second together ('n')\nuse of AM/PM markers ('a') and period of day ('B') together\nuse of year ('y') and year of era ('u') together",
      "bit_signed_check": "BIT: Check for sign of bitwise operation\nThis method compares an expression such as ((event.detail & SWT.SELECTED) > 0). Using bit arithmetic and then comparing with the greater than operator can lead to unexpected results (of course depending on the value of SWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate for a bug. Even when SWT.SELECTED is not negative, it seems good practice to use '!= 0' instead of '> 0'.",
      "odr_open_database_resource": "ODR: Method may fail to close database resource\nThe method creates a database resource (such as a database connection or row set), does not assign it to any fields, pass it to other methods, or return it, and does not appear to close the object on all paths out of the method.  Failure to close database resources on all paths out of a method may result in poor performance, and could cause the application to have problems communicating with the database.\n\nSee CWE-459: Incomplete Cleanup.",
      "odr_open_database_resource_exception_path": "ODR: Method may fail to close database resource on exception\nThe method creates a database resource (such as a database connection or row set), does not assign it to any fields, pass it to other methods, or return it, and does not appear to close the object on all exception paths out of the method.  Failure to close database resources on all paths out of a method may result in poor performance, and could cause the application to have problems communicating with the database.\n\nSee CWE-459: Incomplete Cleanup.",
      "isc_instantiate_static_class": "ISC: Needless instantiation of class that only supplies static methods\nThis class allocates an object that is based on a class that only supplies static methods. This object does not need to be created, just access the static methods directly using the class name as a qualifier.",
      "dmi_random_used_only_once": "DMI: Random object created and used only once\nThis code creates a java.util.Random object, uses it to generate one random number, and then discards the Random object. This produces mediocre quality random numbers and is inefficient. If possible, rewrite the code so that the Random object is created once and saved, and each time a new random number is required invoke a method on the existing Random object to obtain it.\n\nIf it is important that the generated Random numbers not be guessable, you must not create a new Random for each random number; the values are too easily guessable. You should strongly consider using a java.security.SecureRandom instead (and avoid allocating a new SecureRandom for each random number needed).",
      "bc_equals_method_should_work_for_all_objects": "BC: Equals method should not assume anything about the type of its argument\nThe equals(Object o) method shouldn't make any assumptions about the type of o. It should simply return false if o is not the same type as this.",
      "j2_ee_store_of_non_serializable_object_into_session": "J2EE: Store of non-serializable object into HttpSession\nThis code seems to be storing a non-serializable object into an HttpSession. If this session is passivated or migrated, an error will result.\n\nSee CWE-579: J2EE Bad Practices: Non-serializable Object Stored in Session.",
      "gc_unchecked_type_in_generic_call": "GC: Unchecked type in generic call\nThis call to a generic collection method passes an argument while compile type Object where a specific type from the generic type parameters is expected. Thus, neither the standard Java type system nor static analysis can provide useful information on whether the object being passed as a parameter is of an appropriate type.",
      "pz_dont_reuse_entry_objects_in_iterators": "PZ: Don't reuse entry objects in iterators\nThe entrySet() method is allowed to return a view of the underlying Map in which an Iterator and Map.Entry. This clever idea was used in several Map implementations, but introduces the possibility of nasty coding mistakes. If a map m returns such an iterator for an entrySet, then c.addAll(m.entrySet()) will go badly wrong. All the Map implementations in OpenJDK 7 have been rewritten to avoid this, you should too.",
      "dmi_entry_sets_may_reuse_entry_objects": "DMI: Adding elements of an entry set may fail due to reuse of Entry objects\nThe entrySet() method is allowed to return a view of the underlying Map in which a single Entry object is reused and returned during the iteration. As of Java 6, both IdentityHashMap and EnumMap did so. When iterating through such a Map, the Entry value is only valid until you advance to the next iteration. If, for example, you try to pass such an entrySet to an addAll method, things will go badly wrong.",
      "dmi_using_removeall_to_clear_collection": "DMI: Don't use removeAll to clear a collection\nIf you want to remove all elements from a collection c, use c.clear, not c.removeAll(c). Calling c.removeAll(c) to clear a collection is less clear, susceptible to errors from typos, less efficient and for some collections, might throw a ConcurrentModificationException.",
      "throws_method_throws_runtimeexception": "THROWS: Method intentionally throws RuntimeException.\nMethod intentionally throws RuntimeException.\nAccording to the SEI CERT ERR07-J rule, throwing a RuntimeException may cause errors, like the caller not being able to examine the exception and therefore cannot properly recover from it.\nMoreover, throwing a RuntimeException would force the caller to catch RuntimeException and therefore violate the SEI CERT ERR08-J rule.\nPlease note that you can derive from Exception or RuntimeException and may throw a new instance of that exception.\n\nSee CWE-397: Declaration of Throws for Generic Exception.",
      "throws_method_throws_clause_basic_exception": "THROWS: Method lists Exception in its throws clause, but it could be more specific.\nMethod lists Exception in its throws clause.\nWhen declaring a method, the types of exceptions in the throws clause should be the most specific. Therefore, using Exception in the throws clause would force the caller to either use it in its own throws clause, or use it in a try-catch block (when it does not necessarily contain any meaningful information about the thrown exception).\n\nFor more information, see the SEI CERT ERR07-J rule.\n\nSee CWE-397: Declaration of Throws for Generic Exception.",
      "throws_method_throws_clause_throwable": "THROWS: Method lists Throwable in its throws clause, but it could be more specific.\nMethod lists Throwable in its throws clause.\nWhen declaring a method, the types of exceptions in the throws clause should be the most specific. Therefore, using Throwable in the throws clause would force the caller to either use it in its own throws clause, or use it in a try-catch block (when it does not necessarily contain any meaningful information about the thrown exception).\nFurthermore, using Throwable like that is semantically a bad practice, considered that Throwables include Errors as well, but by definition they occur in unrecoverable scenarios.\n\nFor more information, see the SEI CERT ERR07-J rule.\n\nSee CWE-397: Declaration of Throws for Generic Exception.",
      "pa_public_primitive_attribute": "PA: Primitive field is public\nSEI CERT rule OBJ01-J requires that accessibility to fields must be limited. Otherwise, the values of the fields may be manipulated from outside the class, which may be unexpected or undesired behaviour. In general, requiring that no fields are allowed to be public is overkill and unrealistic. Even the rule mentions that final fields may be public. Besides final fields, there may be other usages for public fields: some public fields may serve as 'flags' that affect the behavior of the class. Such flag fields are expected to be read by the current instance (or the current class, in case of static fields), but written by others. If a field is both written by the methods of the current instance (or the current class, in case of static fields) and from the outside, the code is suspicious. Consider making these fields private and provide appropriate setters, if necessary. Please note that constructors, initializers and finalizers are exceptions, if only they write the field inside the class, the field is not considered as written by the class itself.\n\nSee CWE-766: Critical Data Element Declared Public.",
      "pa_public_array_attribute": "PA: Array-type field is public\nSEI CERT rule OBJ01-J requires that accessibility of fields must be limited. Making an array-type field final does not prevent other classes from modifying the contents of the array. However, in general, requiring that no fields are allowed to be public is overkill and unrealistic. There may be usages for public fields: some public fields may serve as 'flags' that affect the behavior of the class. Such flag fields are expected to be read by the current instance (or the current class, in case of static fields), but written by others. If a field is both written by the methods of the current instance (or the current class, in case of static fields) and from the outside, the code is suspicious. Consider making these fields private and provide appropriate setters, if necessary. Please note that constructors, initializers and finalizers are exceptions, if only they write the field inside the class, the field is not considered as written by the class itself.\n\nSee CWE-766: Critical Data Element Declared Public.",
      "pa_public_mutable_object_attribute": "PA: Mutable object-type field is public\nSEI CERT rule OBJ01-J requires that accessibility of fields must be limited. Making a mutable object-type field final does not prevent other classes from modifying the contents of the object. However, in general, requiring that no fields are allowed to be public is overkill and unrealistic. There may be usages for public fields: some public fields may serve as 'flags' that affect the behavior of the class. Such flag fields are expected to be read by the current instance (or the current class, in case of static fields), but written by others. If a field is both written by the methods of the current instance (or the current class, in case of static fields) and from the outside, the code is suspicious. Consider making these fields private and provide appropriate setters, if necessary. Please note that constructors, initializers and finalizers are exceptions, if only they write the field inside the class, the field is not considered as written by the class itself. In case of object-type fields 'writing' means calling methods whose name suggest modification.\n\nSee CWE-766: Critical Data Element Declared Public.",
      "pi_do_not_reuse_public_identifiers_class_names": "PI: Do not reuse public identifiers from JSL as class name\nIt's a good practice to avoid reusing public identifiers from the Java Standard Library as class names. This is because the Java Standard Library is a part of the Java platform and is expected to be available in all Java environments. Doing so can lead to naming conflicts and confusion, making it harder to understand and maintain the code. It's best practice to choose unique and descriptive class names that accurately represent the purpose and functionality of your own code. To provide an example, let's say you want to create a class for handling dates in your application. Instead of using a common name like 'Date', which conflicts with the existing java.util.Date class, you could choose a more specific and unique name like or 'AppDate' or 'DisplayDate'. A few key points to keep in mind when choosing names as identifier:\n\nUse meaningful prefixes or namespaces: Prepend a project-specific prefix or namespace to your class names to make them distinct. For example, if your project is named 'MyApp', you could use 'MyAppDate' as your class name.\nUse descriptive names: Opt for descriptive class names that clearly indicate their purpose and functionality. This helps avoid shadowing existing Java Standard Library identifiers. For instance, instead of 'List', consider using 'CustomAppList'.\nFollow naming conventions: Adhere to Java's naming conventions, such as using camel case (e.g., MyClass) for class names. This promotes code readability and reduces the chances of conflicts.\nSee SEI CERT rule DCL01-J. Do not reuse public identifiers from the Java Standard Library.",
      "pi_do_not_reuse_public_identifiers_field_names": "PI: Do not reuse public identifiers from JSL as field name\nIt is a good practice to avoid reusing public identifiers from the Java Standard Library as field names in your code. Doing so can lead to confusion and potential conflicts, making it harder to understand and maintain your codebase. Instead, it is recommended to choose unique and descriptive names for your fields that accurately represent their purpose and differentiate them from Standard Library identifiers. To provide an example, let's say you want to create a class for handling dates in your application. Instead of using a common name like 'Date', which conflicts with the existing java.util.Date class, you could choose a more specific and unique name like or 'AppDate' or 'DisplayDate'. For example, let's say you're creating a class to represent a car in your application. Instead of using a common name like 'Component' as a field, which conflicts with the existing java.awt.Component class, you should opt for a more specific and distinct name, such as 'VehiclePart' or 'CarComponent'. A few key points to keep in mind when choosing names as identifier:\n\nUse descriptive names: Opt for descriptive field names that clearly indicate their purpose and functionality. This helps avoid shadowing existing Java Standard Library identifiers. For instance, instead of 'list', consider using 'myFancyList'\nFollow naming conventions: Adhere to Java's naming conventions, such as using mixed case for field names. Start with a lowercase first letter and the internal words should start with capital letters (e.g., myFieldUsesMixedCase). This promotes code readability and reduces the chances of conflicts.\nSee SEI CERT rule DCL01-J. Do not reuse public identifiers from the Java Standard Library.",
      "pi_do_not_reuse_public_identifiers_method_names": "PI: Do not reuse public identifiers from JSL as method name\nIt is a good practice to avoid reusing public identifiers from the Java Standard Library as method names in your code. Doing so can lead to confusion, potential conflicts, and unexpected behavior. To maintain code clarity and ensure proper functionality, it is recommended to choose unique and descriptive names for your methods that accurately represent their purpose and differentiate them from standard library identifiers. To provide an example, let's say you want to create a method that handles creation of a custom file in your application. Instead of using a common name like 'File' for the method, which conflicts with the existing java.io.File class, you could choose a more specific and unique name like or 'generateFile' or 'createOutPutFile'. A few key points to keep in mind when choosing names as identifier:\n\nUse descriptive names: Opt for descriptive method names that clearly indicate their purpose and functionality. This helps avoid shadowing existing Java Standard Library identifiers. For instance, instead of 'abs()', consider using 'calculateAbsoluteValue()'.\nFollow naming conventions: Adhere to Java's naming conventions, such as using mixed case for method names. Method names should be verbs, with the first letter lowercase and the first letter of each internal word capitalized (e.g. runFast()). This promotes code readability and reduces the chances of conflicts.\nSee SEI CERT rule DCL01-J. Do not reuse public identifiers from the Java Standard Library.",
      "pi_do_not_reuse_public_identifiers_local_variable_names": "PI: Do not reuse public identifiers from JSL as method name\nWhen declaring local variables in Java, it is a good practice to refrain from reusing public identifiers from the Java Standard Library. Reusing these identifiers as local variable names can lead to confusion, hinder code comprehension, and potentially cause conflicts with existing publicly available identifier names from the Java Standard Library. To maintain code clarity and avoid such issues, it is best practice to select unique and descriptive names for your local variables. To provide an example, let's say you want to store a custom font value in a variable. Instead of using a common name like 'Font' for the variable name, which conflicts with the existing java.awt.Font class, you could choose a more specific and unique name like or 'customFont' or 'loadedFontName'. A few key points to keep in mind when choosing names as identifier:\n\nUse descriptive names: Opt for descriptive variable names that clearly indicate their purpose and functionality. This helps avoid shadowing existing Java Standard Library identifiers. For instance, instead of 'variable', consider using 'myVariableName'.\nFollow naming conventions: Adhere to Java's naming conventions, such as using mixed case for variable names. Start with a lowercase first letter and the internal words should start with capital letters (e.g. myVariableName). This promotes code readability and reduces the chances of conflicts.\nSee SEI CERT rule DCL01-J. Do not reuse public identifiers from the Java Standard Library.",
      "env_use_property_instead_of_env": "ENV: It is preferable to use portable Java property instead of environment variable.\nEnvironment variables are not portable, the variable name itself (not only the value) may be different depending on the running OS. Not only the names of the specific environment variables can differ (e.g. `USERNAME` in Windows and `USER` in Unix systems), but even the semantics differ, e.g. the case sensitivity (Windows being case-insensitive and Unix case-sensitive). Moreover, the Map of the environment variables returned by java.lang.System.getenv() and its collection views may not obey the general contract of the Object.equals(java.lang.Object) and Object.hashCode() methods. Consequently, using environment variables may have unintended side effects. Also, the visibility of environment variables is less restricted compared to Java Properties: they are visible to all descendants of the defining process, not just the immediate Java subprocess. For these reasons, even the Java API of java.lang.System advises to use Java properties (java.lang.System.getProperty(java.lang.String)) instead of environment variables (java.lang.System.getenv(java.lang.String)) where possible.\n\nIf a value can be accessed through both System.getProperty() and System.getenv(), it should be accessed using the former.\n\nMapping of corresponding Java System properties:\n\nEnvironment variable\tProperty\nJAVA_HOME\tjava.home\nJAVA_VERSION\tjava.version\nTEMP\tjava.io.tmpdir\nTMP\tjava.io.tmpdir\nPROCESSOR_ARCHITECTURE\tos.arch\nOS\tos.name\nUSER\tuser.name\nUSERNAME\tuser.name\nHOME\tuser.home\nHOMEPATH\tuser.home\nCD\tuser.dir\nPWD\tuser.dir\nSee SEI CERT rule ENV02-J. Do not trust the values of environment variables.",
      "overriding_methods_must_invoke_super": "CN: Super method is annotated with @OverridingMethodsMustInvokeSuper, but the overriding method isn't calling the super method.\nSuper method is annotated with @OverridingMethodsMustInvokeSuper, but the overriding method isn't calling the super method.",
      "np_optional_return_null": "NP: Method with Optional return type returns explicit null\nThe usage of Optional return type (java.util.Optional or com.google.common.base.Optional) always means that explicit null returns were not desired by design. Returning a null value in such case is a contract violation and will most likely break client code.",
      "np_nonnull_field_not_initialized_in_constructor": "NP: Non-null field is not initialized\nThe field is marked as non-null, but isn't written to by the constructor. The field might be initialized elsewhere during constructor, or might always be initialized before use.",
      "vr_unresolvable_reference": "VR: Class makes reference to unresolvable class or method\nThis class makes a reference to a class or method that cannot be resolved using against the libraries it is being analyzed with.",
      "il_infinite_loop": "IL: An apparent infinite loop\nThis loop doesn't seem to have a way to terminate (other than by perhaps throwing an exception).\n\nSee CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop').",
      "io_appending_to_object_output_stream": "IO: Doomed attempt to append to an object output stream\nThis code opens a file in append mode and then wraps the result in an object output stream like as follows:\n\nOutputStream out = new FileOutputStream(anyFile, true);\nnew ObjectOutputStream(out);\nThis won't allow you to append to an existing object output stream stored in a file. If you want to be able to append to an object output stream, you need to keep the object output stream open.\n\nThe only situation in which opening a file in append mode and the writing an object output stream could work is if on reading the file you plan to open it in random access mode and seek to the byte offset where the append started.",
      "il_infinite_recursive_loop": "IL: An apparent infinite recursive loop\nThis method unconditionally invokes itself. This would seem to indicate an infinite recursive loop that will result in a stack overflow.\n\nSee CWE-674: Uncontrolled Recursion and CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop').",
      "il_container_added_to_itself": "IL: A collection is added to itself\nA collection is added to itself. As a result, computing the hashCode of this set will throw a StackOverflowException.",
      "rp_c_repeated_conditional_test": "RpC: Repeated conditional tests\nThe code contains a conditional test is performed twice, one right after the other (e.g., x == 0 || x == 0). Perhaps the second occurrence is intended to be something else (e.g., x == 0 || y == 0).",
      "fl_math_using_float_precision": "FL: Method performs math using floating point precision\nThe method performs math operations using floating point precision. Floating point precision is very imprecise. For example, 16777216.0f + 1.0f = 16777216.0f. Consider using double math instead.\n\nSee CWE-1339: Insufficient Precision or Accuracy of a Real Number.",
      "caa_covariant_array_element_store": "CAA: Possibly incompatible element is stored in covariant array\nValue is stored into the array and the value type doesn't match the array type. It's known from the analysis that actual array type is narrower than the declared type of its variable or field and this assignment doesn't satisfy the original array type. This assignment may cause ArrayStoreException at runtime.",
      "dmi_vacuous_call_to_easymock_method": "Dm: Useless/vacuous call to EasyMock method\nThis call doesn't pass any objects to the EasyMock method, so the call doesn't do anything.",
      "dmi_futile_attempt_to_change_maxpool_size_of_scheduled_thread_pool_executor": "Dm: Futile attempt to change max pool size of ScheduledThreadPoolExecutor\n(Javadoc) While ScheduledThreadPoolExecutor inherits from ThreadPoolExecutor, a few of the inherited tuning methods are not useful for it. In particular, because it acts as a fixed-sized pool using corePoolSize threads and an unbounded queue, adjustments to maximumPoolSize have no useful effect.",
      "dmi_bigdecimal_constructed_from_double": "DMI: BigDecimal constructed from double that isn't represented precisely\nThis code creates a BigDecimal from a double value that doesn't translate well to a decimal number. For example, one might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. You probably want to use the BigDecimal.valueOf(double d) method, which uses the String representation of the double to create the BigDecimal (e.g., BigDecimal.valueOf(0.1) gives 0.1).\n\nSee CWE-1339: Insufficient Precision or Accuracy of a Real Number.",
      "dmi_scheduled_thread_pool_executor_with_zero_core_threads": "Dm: Creation of ScheduledThreadPoolExecutor with zero core threads",
      "dmi_annotation_is_not_visible_to_reflection": "Dm: Cannot use reflection to check for presence of annotation without runtime retention\nUnless an annotation has itself been annotated with @Retention(RetentionPolicy.RUNTIME), the annotation cannot be observed using reflection (e.g., by using the isAnnotationPresent method). .",
      "np_argument_might_be_null": "NP: Method does not check for null argument\nA parameter to this method has been identified as a value that should always be checked to see whether or not it is null, but it is being dereferenced without a preceding null check.",
      "rv_absolute_value_of_random_int": "RV: Bad attempt to compute absolute value of signed random integer\nThis code generates a random signed integer and then computes the absolute value of that random integer. If the number returned by the random number generator is Integer.MIN_VALUE, then the result will be negative as well (since Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE). (Same problem arises for long values as well).",
      "rv_absolute_value_of_hashcode": "RV: Bad attempt to compute absolute value of signed 32-bit hashcode\nThis code generates a hashcode and then computes the absolute value of that hashcode. If the hashcode is Integer.MIN_VALUE, then the result will be negative as well (since Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE).\n\nOne out of 2^32 strings have a hashCode of Integer.MIN_VALUE, including 'polygenelubricants' 'GydZG_' and ''DESIGNING WORKHOUSES'.",
      "rv_01_to_int": "RV: Random value from 0 to 1 is coerced to the integer 0\nA random value from 0 to 1 is being coerced to the integer value 0. You probably want to multiply the random value by something else before coercing it to an integer, or use the Random.nextInt(n) method.",
      "dm_invalid_min_max": "Dm: Incorrect combination of Math.max and Math.min\nThis code tries to limit the value bounds using the construct like Math.min(0, Math.max(100, value)). However the order of the constants is incorrect: it should be Math.min(100, Math.max(0, value)). As the result this code always produces the same result (or NaN if the value is NaN).",
      "eq_comparing_class_names": "Eq: equals method compares class names rather than class objects\nThis class defines an equals method that checks to see if two objects are the same class by checking to see if the names of their classes are equal. You can have different classes with the same name if they are loaded by different class loaders. Just check to see if the class objects are the same.\n\nSee CWE-486: Comparison of Classes by Name.",
      "eq_always_true": "Eq: equals method always returns true\nThis class defines an equals method that always returns true. This is imaginative, but not very smart. Plus, it means that the equals method is not symmetric.\n\nSee CWE-571: Expression is Always True.",
      "eq_always_false": "Eq: equals method always returns false\nThis class defines an equals method that always returns false. This means that an object is not equal to itself, and it is impossible to create useful Maps or Sets of this class. More fundamentally, it means that equals is not reflexive, one of the requirements of the equals method.\n\nThe likely intended semantics are object identity: that an object is equal to itself. This is the behavior inherited from class Object. If you need to override an equals inherited from a different superclass, you can use:\n\npublic boolean equals(Object o) {\n    return this == o;\n}\n<\\p>\nSee CWE-570: Expression is Always False.",
      "eq_overriding_equals_not_symmetric": "Eq: equals method overrides equals in superclass and may not be symmetric\nThis class defines an equals method that overrides an equals method in a superclass. Both equals methods use instanceof in the determination of whether two objects are equal. This is fraught with peril, since it is important that the equals method is symmetrical (in other words, a.equals(b) == b.equals(a)). If B is a subtype of A, and A's equals method checks that the argument is an instanceof A, and B's equals method checks that the argument is an instanceof B, it is quite likely that the equivalence relation defined by these methods is not symmetric.",
      "eq_dont_define_equals_for_enum": "Eq: Covariant equals() method defined for enum\nThis class defines an enumeration, and equality on enumerations are defined using object identity. Defining a covariant equals method for an enumeration value is exceptionally bad practice, since it would likely result in having two different enumeration values that compare as equals using the covariant enum method, and as not equal when compared normally. Don't do it.",
      "eq_self_use_object": "Eq: Covariant equals() method defined, Object.equals(Object) inherited\nThis class defines a covariant version of the equals() method, but inherits the normal equals(Object) method defined in the base java.lang.Object class.  The class should probably define a boolean equals(Object) method.",
      "eq_other_use_object": "Eq: equals() method defined that doesn't override Object.equals(Object)\nThis class defines an equals() method, that doesn't override the normal equals(Object) method defined in the base java.lang.Object class.  The class should probably define a boolean equals(Object) method.",
      "eq_other_no_object": "Eq: equals() method defined that doesn't override equals(Object)\nThis class defines an equals() method, that doesn't override the normal equals(Object) method defined in the base java.lang.Object class.  Instead, it inherits an equals(Object) method from a superclass. The class should probably define a boolean equals(Object) method.",
      "he_signature_declares_hashing_of_unhashable_class": "HE: Signature declares use of unhashable class in hashed construct\nA method, field or class declares a generic signature where a non-hashable class is used in context where a hashable class is required. A class that declares an equals method but inherits a hashCode() method from Object is unhashable, since it doesn't fulfill the requirement that equal objects have equal hashCodes.",
      "he_use_of_unhashable_class": "HE: Use of class without a hashCode() method in a hashed data structure\nA class defines an equals(Object) method but not a hashCode() method, and thus doesn't fulfill the requirement that equal objects have equal hashCodes. An instance of this class is used in a hash data structure, making the need to fix this problem of highest importance.",
      "ur_uninit_read": "UR: Uninitialized read of field in constructor\nThis constructor reads a field which has not yet been assigned a value.  This is often caused when the programmer mistakenly uses the field instead of one of the constructor's parameters.\n\nSee CWE-457: Use of Uninitialized Variable.",
      "ur_uninit_read_called_from_super_constructor": "UR: Uninitialized read of field method called from constructor of superclass\nThis method is invoked in the constructor of the superclass. At this point, the fields of the class have not yet initialized.\n\nTo make this more concrete, consider the following classes:\n\nabstract class A {\n    int hashCode;\n    abstract Object getValue();\n\n    A() {\n        hashCode = getValue().hashCode();\n    }\n}\n\nclass B extends A {\n    Object value;\n\n    B(Object v) {\n        this.value = v;\n    }\n\n    Object getValue() {\n        return value;\n    }\n}\nWhen a B is constructed, the constructor for the A class is invoked before the constructor for B sets value. Thus, when the constructor for A invokes getValue, an uninitialized value is read for value.\n\nSee CWE-457: Use of Uninitialized Variable.",
      "nm_very_confusing": "Nm: Very confusing method names\nThe referenced methods have names that differ only by capitalization. This is very confusing because if the capitalization were identical then one of the methods would override the other.",
      "nm_wrong_package": "Nm: Method doesn't override method in superclass due to wrong package for parameter\nThe method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match the type of the corresponding parameter in the superclass. For example, if you have:\n\nimport alpha.Foo;\n\npublic class A {\n    public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\n\npublic class B extends A {\n    public int f(Foo x) { return 42; }\n}\nThe f(Foo) method defined in class B doesn't override the f(Foo) method defined in class A, because the argument types are Foo's from different packages.",
      "nm_method_constructor_confusion": "Nm: Apparent method/constructor confusion\nThis regular method has the same name as the class it is defined in. It is likely that this was intended to be a constructor. If it was intended to be a constructor, remove the declaration of a void return value. If you had accidentally defined this method, realized the mistake, defined a proper constructor but cannot get rid of this method due to backwards compatibility, deprecate the method.",
      "nm_lcase_hashcode": "Nm: Class defines hashcode(); should it be hashCode()?\nThis class defines a method called hashcode().  This method does not override the hashCode() method in java.lang.Object, which is probably what was intended.",
      "nm_lcase_tostring": "Nm: Class defines tostring(); should it be toString()?\nThis class defines a method called tostring().  This method does not override the toString() method in java.lang.Object, which is probably what was intended.",
      "nm_bad_equal": "Nm: Class defines equal(Object); should it be equals(Object)?\nThis class defines a method equal(Object).  This method does not override the equals(Object) method in java.lang.Object, which is probably what was intended.",
      "se_read_resolve_is_static": "Se: The readResolve method must not be declared as a static method.\nIn order for the readResolve method to be recognized by the serialization mechanism, it must not be declared as a static method.",
      "se_method_must_be_private": "Se: Method must be private in order for serialization to work\nThis class implements the Serializable interface, and defines a method for custom serialization/deserialization. But since that method isn't declared private, it will be silently ignored by the serialization/deserialization API.",
      "sf_dead_store_due_to_switch_fallthrough": "SF: Dead store due to switch statement fall through\nA value stored in the previous switch case is overwritten here due to a switch fall through. It is likely that you forgot to put a break or return at the end of the previous case.\n\nSee CWE-484: Omitted Break Statement in Switch.",
      "sf_dead_store_due_to_switch_fallthrough_to_throw": "SF: Dead store due to switch statement fall through to throw\nA value stored in the previous switch case is ignored here due to a switch fall through to a place where an exception is thrown. It is likely that you forgot to put a break or return at the end of the previous case.\n\nSee CWE-484: Omitted Break Statement in Switch.",
      "np_unwritten_field": "NP: Read of unwritten field\nThe program is dereferencing a field that does not seem to ever have a non-null value written to it. Unless the field is initialized via some mechanism not seen by the analysis, dereferencing this value will generate a null pointer exception.\n\nSee CWE-457: Use of Uninitialized Variable.",
      "uwf_null_field": "UwF: Field only ever set to null\nAll writes to this field are of the constant value null, and thus all reads of the field will return null. Check for errors, or remove it if it is useless.",
      "uwf_unwritten_field": "UwF: Unwritten field\nThis field is never written.  All reads of it will return the default value. Check for errors (should it have been initialized?), or remove it if it is useless.\n\nSee CWE-457: Use of Uninitialized Variable.",
      "sic_threadlocal_deadly_embrace": "SIC: Deadly embrace of non-static inner class and thread local\nThis class is an inner class, but should probably be a static inner class. As it is, there is a serious danger of a deadly embrace between the inner class and the thread local in the outer class. Because the inner class isn't static, it retains a reference to the outer class. If the thread local contains a reference to an instance of the inner class, the inner and outer instance will both be reachable and not eligible for garbage collection.",
      "range_array_index": "RANGE: Array index is out of bounds\nArray operation is performed, but array index is out of bounds, which will result in ArrayIndexOutOfBoundsException at runtime.",
      "range_array_offset": "RANGE: Array offset is out of bounds\nMethod is called with array parameter and offset parameter, but the offset is out of bounds. This will result in IndexOutOfBoundsException at runtime.",
      "range_array_length": "RANGE: Array length is out of bounds\nMethod is called with array parameter and length parameter, but the length is out of bounds. This will result in IndexOutOfBoundsException at runtime.",
      "range_string_index": "RANGE: String index is out of bounds\nString method is called and specified string index is out of bounds. This will result in StringIndexOutOfBoundsException at runtime.",
      "rv_return_value_ignored": "RV: Method ignores return value\nThe return value of this method should be checked. One common cause of this warning is to invoke a method on an immutable object, thinking that it updates the object. For example, in the following code fragment,\n\nString dateString = getHeaderField(name);\ndateString.trim();\nthe programmer seems to be thinking that the trim() method will update the String referenced by dateString. But since Strings are immutable, the trim() function returns a new String value, which is being ignored here. The code should be corrected to:\n\nString dateString = getHeaderField(name);\ndateString = dateString.trim();\n<\\p>\nSee CWE-252: Unchecked Return Value.",
      "rv_exception_not_thrown": "RV: Exception created and dropped rather than thrown\nThis code creates an exception (or error) object, but doesn't do anything with it. For example, something like\n\nif (x < 0) {\n    new IllegalArgumentException('x must be nonnegative');\n}\nIt was probably the intent of the programmer to throw the created exception:\n\nif (x < 0) {\n    throw new IllegalArgumentException('x must be nonnegative');\n}",
      "rv_check_compareto_for_specific_return_value": "RV: Code checks for specific values returned by compareTo\nThis code invoked a compareTo or compare method, and checks to see if the return value is a specific value, such as 1 or -1. When invoking these methods, you should only check the sign of the result, not for any specific non-zero value. While many or most compareTo and compare methods only return -1, 0 or 1, some of them will return other values.\n\nSee CWE-253: Incorrect Check of Function Return Value.",
      "np_always_null": "NP: Null pointer dereference\nA null pointer is dereferenced here.  This will lead to a NullPointerException when the code is executed.",
      "np_closing_null": "NP: close() invoked on a value that is always null\nclose() is being invoked on a value that is always null. If this statement is executed, a null pointer exception will occur. But the big risk here you never close something that should be closed.",
      "np_store_into_nonnull_field": "NP: Store of null value into field annotated @Nonnull\nA value that could be null is stored into a field that has been annotated as @Nonnull.",
      "np_always_null_exception": "NP: Null pointer dereference in method on exception path\nA pointer which is null on an exception path is dereferenced here.  This will lead to a NullPointerException when the code is executed.  Note that because SpotBugs currently does not prune infeasible exception paths, this may be a false warning.\n\nAlso note that SpotBugs considers the default case of a switch statement to be an exception path, since the default case is often infeasible.",
      "np_null_on_some_path": "NP: Possible null pointer dereference\nThere is a branch of statement that, if executed, guarantees that a null value will be dereferenced, which would generate a NullPointerException when the code is executed. Of course, the problem might be that the branch or statement is infeasible and that the null pointer exception cannot ever be executed; deciding that is beyond the ability of SpotBugs.",
      "np_null_on_some_path_exception": "NP: Possible null pointer dereference in method on exception path\nA reference value which is null on some exception control path is dereferenced here.  This may lead to a NullPointerException when the code is executed.  Note that because SpotBugs currently does not prune infeasible exception paths, this may be a false warning.\n\nAlso note that SpotBugs considers the default case of a switch statement to be an exception path, since the default case is often infeasible.",
      "np_null_param_deref": "NP: Method call passes null for non-null parameter\nThis method call passes a null value for a non-null method parameter. Either the parameter is annotated as a parameter that should always be non-null, or analysis has shown that it will always be dereferenced.",
      "np_null_param_deref_nonvirtual": "NP: Non-virtual method call passes null for non-null parameter\nA possibly-null value is passed to a non-null method parameter. Either the parameter is annotated as a parameter that should always be non-null, or analysis has shown that it will always be dereferenced.",
      "np_null_param_deref_all_targets_dangerous": "NP: Method call passes null for non-null parameter\nA possibly-null value is passed at a call site where all known target methods require the parameter to be non-null. Either the parameter is annotated as a parameter that should always be non-null, or analysis has shown that it will always be dereferenced.",
      "np_nonnull_param_violation": "NP: Method call passes null to a non-null parameter\nThis method passes a null value as the parameter of a method which must be non-null. Either this parameter has been explicitly marked as @Nonnull, or analysis has determined that this parameter is always dereferenced.",
      "np_nonnull_return_violation": "NP: Method may return null, but is declared @Nonnull\nThis method may return a null value, but the method (or a superclass method which it overrides) is declared to return @Nonnull.",
      "np_guaranteed_deref": "NP: Null value is guaranteed to be dereferenced\nThere is a statement or branch that if executed guarantees that a value is null at this point, and that value that is guaranteed to be dereferenced (except on forward paths involving runtime exceptions).\n\nNote that a check such as if (x == null) throw new NullPointerException(); is treated as a dereference of x.",
      "np_guaranteed_deref_on_exception_path": "NP: Value is null and guaranteed to be dereferenced on exception path\nThere is a statement or branch on an exception path that if executed guarantees that a value is null at this point, and that value that is guaranteed to be dereferenced (except on forward paths involving runtime exceptions).",
      "dmi_arguments_wrong_order": "DMI: Reversed method arguments\nThe arguments to this method call seem to be in the wrong order. For example, a call Preconditions.checkNotNull('message', message) has reserved arguments: the value to be checked is the first argument.\n\nSee CWE-683: Function Call With Incorrect Order of Arguments.",
      "rcn_redundant_nullcheck_would_have_been_a_npe": "RCN: Nullcheck of value previously dereferenced\nA value is checked here to see whether it is null, but this value cannot be null because it was previously dereferenced and if it were null a null pointer exception would have occurred at the earlier dereference. Essentially, this code and the previous dereference disagree whether this value is allowed to be null. Either the check is redundant or the previous dereference is erroneous.",
      "rc_ref_comparison": "RC: Suspicious reference comparison\nThis method compares two reference values using the == or != operator, where the correct way to compare instances of this type is generally with the equals() method. It is possible to create distinct instances that are equal but do not compare as == since they are different objects. Examples of classes which should generally not be compared by reference are java.lang.Integer, java.lang.Float, etc. RC_REF_COMPARISON covers only wrapper types for primitives. Suspicious types list can be extended by adding frc.suspicious system property with comma-separated classes:\n\n<systemPropertyVariables>\n              <frc.suspicious>java.time.LocalDate,java.util.List</frc.suspicious>\n           </systemPropertyVariables>\nSee CWE-595: Comparison of Object References Instead of Object Contents.",
      "va_primitive_array_passed_to_object_vararg": "VA: Primitive array passed to function expecting a variable number of object arguments\nThis code passes a primitive array to a function that takes a variable number of object arguments. This creates an array of length one to hold the primitive array and passes it to the function.",
      "ec_unrelated_types_using_pointer_equality": "EC: Using pointer equality to compare different types\nThis method uses pointer equality to compare two references that seem to be of different types. The result of this comparison will always be false at runtime.\n\nSee CWE-570: Expression is Always False.",
      "ec_unrelated_types": "EC: Call to equals() comparing different types\nThis method calls equals(Object) on two references of different class types and analysis suggests they will be to objects of different classes at runtime. Further, examination of the equals methods that would be invoked suggest that either this call will always return false, or else the equals method is not symmetric (which is a property required by the contract for equals in class Object).\n\nSee CWE-570: Expression is Always False.",
      "ec_array_and_nonarray": "EC: equals() used to compare array and nonarray\nThis method invokes the .equals(Object o) to compare an array and a reference that doesn't seem to be an array. If things being compared are of different types, they are guaranteed to be unequal and the comparison is almost certainly an error. Even if they are both arrays, the equals() method on arrays only determines if the two arrays are the same object. To compare the contents of the arrays, use java.util.Arrays.equals(Object[], Object[]).",
      "ec_null_arg": "EC: Call to equals(null)\nThis method calls equals(Object), passing a null value as the argument. According to the contract of the equals() method, this call should always return false.\n\nSee CWE-570: Expression is Always False.",
      "ec_unrelated_interfaces": "EC: Call to equals() comparing different interface types\nThis method calls equals(Object) on two references of unrelated interface types, where neither is a subtype of the other, and there are no known non-abstract classes which implement both interfaces. Therefore, the objects being compared are unlikely to be members of the same class at runtime (unless some application classes were not analyzed, or dynamic class loading can occur at runtime). According to the contract of equals(), objects of different classes should always compare as unequal; therefore, according to the contract defined by java.lang.Object.equals(Object), the result of this comparison will always be false at runtime.\n\nSee CWE-570: Expression is Always False.",
      "ec_unrelated_class_and_interface": "EC: Call to equals() comparing unrelated class and interface\nThis method calls equals(Object) on two references, one of which is a class and the other an interface, where neither the class nor any of its non-abstract subclasses implement the interface. Therefore, the objects being compared are unlikely to be members of the same class at runtime (unless some application classes were not analyzed, or dynamic class loading can occur at runtime). According to the contract of equals(), objects of different classes should always compare as unequal; therefore, according to the contract defined by java.lang.Object.equals(Object), the result of this comparison will always be false at runtime.\n\nSee CWE-570: Expression is Always False.",
      "sa_local_self_assignment_instead_of_field": "SA: Self assignment of local rather than assignment to field\nThis method contains a self assignment of a local variable, and there is a field with an identical name, e.g.:\n\n    int foo;\n    public void setFoo(int foo) {\n        foo = foo;\n    }\nThe assignment is useless. Did you mean to assign to the field instead?",
      "int_bad_comparison_with_int_value": "INT: Bad comparison of int value with long constant\nThis code compares an int value with a long constant that is outside the range of values that can be represented as an int value. This comparison is vacuous and possibly incorrect.",
      "int_bad_comparison_with_signed_byte": "INT: Bad comparison of signed byte\nSigned bytes can only have a value in the range -128 to 127. Comparing a signed byte with a value outside that range is vacuous and likely to be incorrect. To convert a signed byte b to an unsigned value in the range 0..255, use 0xff & b.",
      "int_bad_comparison_with_nonnegative_value": "INT: Bad comparison of nonnegative value with negative constant or zero\nThis code compares a value that is guaranteed to be non-negative with a negative constant or zero.",
      "bit_add_of_signed_byte": "Adds a byte value and a value which is known to have the 8 lower bits clear. Values loaded from a byte array are sign extended to 32 bits before any bitwise operations are performed on the value. Thus, if b[0] contains the value 0xff, and x is initially 0, then the code ((x << 8) + b[0]) will sign extend 0xff to get 0xffffffff, and thus give the value 0xffffffff as the result.\n\nIn particular, the following code for packing a byte array into an int is badly wrong:\n\nint result = 0;\nfor (int i = 0; i < 4; i++)\n    result = ((result << 8) + b[i]);\nThe following idiom will work instead:\n\nint result = 0;\nfor (int i = 0; i < 4; i++)\n    result = ((result << 8) + (b[i] & 0xff));",
      "bit_ior_of_signed_byte": "BIT: Bitwise OR of signed byte value\nLoads a byte value (e.g., a value loaded from a byte array or returned by a method with return type byte) and performs a bitwise OR with that value. Byte values are sign extended to 32 bits before any bitwise operations are performed on the value. Thus, if b[0] contains the value 0xff, and x is initially 0, then the code ((x << 8) | b[0]) will sign extend 0xff to get 0xffffffff, and thus give the value 0xffffffff as the result.\n\nIn particular, the following code for packing a byte array into an int is badly wrong:\n\nint result = 0;\nfor (int i = 0; i < 4; i++) {\n    result = ((result << 8) | b[i]);\n}\nThe following idiom will work instead:\n\nint result = 0;\nfor (int i = 0; i < 4; i++) {\n    result = ((result << 8) | (b[i] & 0xff));\n}",
      "bit_signed_check_high_bit": "BIT: Check for sign of bitwise operation involving negative number\nThis method compares a bitwise expression such as ((val & CONSTANT) > 0) where CONSTANT is the negative number. Using bit arithmetic and then comparing with the greater than operator can lead to unexpected results. This comparison is unlikely to work as expected. The good practice is to use '!= 0' instead of '> 0'.",
      "bit_and": "BIT: Incompatible bit masks\nThis method compares an expression of the form (e & C) to D, which will always compare unequal due to the specific values of constants C and D. This may indicate a logic error or typo.",
      "bit_and_zz": "BIT: Check to see if ((…) & 0) == 0\nThis method compares an expression of the form (e & 0) to 0, which will always compare equal. This may indicate a logic error or typo.",
      "bit_ior": "BIT: Incompatible bit masks\nThis method compares an expression of the form (e | C) to D. which will always compare unequal due to the specific values of constants C and D. This may indicate a logic error or typo.\n\nTypically, this bug occurs because the code wants to perform a membership test in a bit set, but uses the bitwise OR operator ('|') instead of bitwise AND ('&').\n\nAlso such bug may appear in expressions like (e & A | B) == C which is parsed like ((e & A) | B) == C while (e & (A | B)) == C was intended.",
      "sa_field_self_assignment": "SA: Self assignment of field\nThis method contains a self assignment of a field; e.g.\n\nint x;\npublic void foo() {\n    x = x;\n}\nSuch assignments are useless, and may indicate a logic error or typo.",
      "sa_field_self_computation": "SA: Nonsensical self computation involving a field (e.g., x & x)\nThis method performs a nonsensical computation of a field with another reference to the same field (e.g., x&x or x-x). Because of the nature of the computation, this operation doesn't seem to make sense, and may indicate a typo or a logic error. Double-check the computation.",
      "sa_local_self_computation": "SA: Nonsensical self computation involving a variable (e.g., x & x)\nThis method performs a nonsensical computation of a local variable with another reference to the same variable (e.g., x&x or x-x). Because of the nature of the computation, this operation doesn't seem to make sense, and may indicate a typo or a logic error. Double-check the computation.",
      "sa_field_self_comparison": "SA: Self comparison of field with itself\nThis method compares a field with itself, and may indicate a typo or a logic error. Make sure that you are comparing the right things.",
      "sa_local_self_comparison": "SA: Self comparison of value with itself\nThis method compares a local variable with itself, and may indicate a typo or a logic error. Make sure that you are comparing the right things.",
      "umac_uncallable_method_of_anonymous_class": "UMAC: Uncallable method defined in anonymous class\nThis anonymous class defines a method that is not directly invoked and does not override a method in a superclass. Since methods in other classes cannot directly invoke methods declared in an anonymous class, it seems that this method is uncallable. The method might simply be dead code, but it is also possible that the method is intended to override a method declared in a superclass, and due to a typo or other error the method does not, in fact, override the method it is intended to.\n\nSee CWE-561: Dead Code.",
      "iju_assert_method_invoked_from_run_method": "IJU: JUnit assertion in run method will not be noticed by JUnit\nA JUnit assertion is performed in a run method. Failed JUnit assertions just result in exceptions being thrown. Thus, if this exception occurs in a thread other than the thread that invokes the test method, the exception will terminate the thread but not result in the test failing.",
      "iju_bad_suite_method": "IJU: TestCase declares a bad suite method\nClass is a JUnit TestCase and defines a suite() method. However, the suite method needs to be declared as either\n\npublic static junit.framework.Test suite()\nor\n\npublic static junit.framework.TestSuite suite()",
      "iju_setup_no_super": "IJU: TestCase defines setUp that doesn't call super.setUp()\nClass is a JUnit TestCase and implements the setUp method. The setUp method should call super.setUp(), but doesn't.",
      "iju_teardown_no_super": "IJU: TestCase defines tearDown that doesn't call super.tearDown()\nClass is a JUnit TestCase and implements the tearDown method. The tearDown method should call super.tearDown(), but doesn't.",
      "iju_suite_not_static": "IJU: TestCase implements a non-static suite method\nClass is a JUnit TestCase and implements the suite() method. The suite method should be declared as being static, but isn't.",
      "iju_no_tests": "IJU: TestCase has no tests\nClass is a JUnit TestCase but has not implemented any test methods.",
      "boa_badly_overridden_adapter": "BOA: Class overrides a method implemented in super class Adapter wrongly\nThis method overrides a method found in a parent class, where that class is an Adapter that implements a listener defined in the java.awt.event or javax.swing.event package. As a result, this method will not get called when the event occurs.",
      "sql_bad_resultset_access": "SQL: Method attempts to access a result set field with index 0\nA call to getXXX or updateXXX methods of a result set was made where the field index is 0. As ResultSet fields start at index 1, this is always a mistake.",
      "sql_bad_prepared_statement_access": "SQL: Method attempts to access a prepared statement parameter with index 0\nA call to a setXXX method of a prepared statement was made where the parameter index is 0. As parameter indexes start at index 1, this is always a mistake.",
      "sio_superfluous_instanceof": "SIO: Unnecessary type check done using instanceof operator\nType check performed using the instanceof operator where it can be statically determined whether the object is of the type requested.",
      "bac_bad_applet_constructor": "BAC: Bad Applet Constructor relies on uninitialized AppletStub\nThis constructor calls methods in the parent Applet that rely on the AppletStub. Since the AppletStub isn't initialized until the init() method of this applet is called, these methods will not perform correctly.",
      "ec_incompatible_array_compare": "EC: equals(…) used to compare incompatible arrays\nThis method invokes the .equals(Object o) to compare two arrays, but the arrays of incompatible types (e.g., String[] and StringBuffer[], or String[] and int[]). They will never be equal. In addition, when equals(...) is used to compare arrays it only checks to see if they are the same array, and ignores the contents of the arrays.\n\nSee CWE-570: Expression is Always False.",
      "ec_bad_array_compare": "EC: Invocation of equals() on an array, which is equivalent to ==\nThis method invokes the .equals(Object o) method on an array. Since arrays do not override the equals method of Object, calling equals on an array is the same as comparing their addresses. To compare the contents of the arrays, use java.util.Arrays.equals(Object[], Object[]). To compare the addresses of the arrays, it would be less confusing to explicitly check pointer equality using ==.",
      "sti_interrupted_on_currentthread": "STI: Unneeded use of currentThread() call, to call interrupted()\nThis method invokes the Thread.currentThread() call, just to call the interrupted() method. As interrupted() is a static method, it is more simple and clear to use Thread.interrupted().",
      "sti_interrupted_on_unknownthread": "STI: Static Thread.interrupted() method invoked on thread instance\nThis method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is not the current thread. As the interrupted() method is static, the interrupted method will be called on a different object than the one the author intended.",
      "dls_dead_local_increment_in_return": "DLS: Useless increment in return statement\nThis statement has a return such as return x++; / return x--;. A postfix increment/decrement does not impact the value of the expression, so this increment/decrement has no effect. Please verify that this statement does the right thing.\n\nSee CWE-563: Assignment to Variable without Use.",
      "dls_dead_store_of_class_literal": "DLS: Dead store of class literal\nThis instruction assigns a class literal to a variable and then never uses it. The behavior of this differs in Java 1.4 and in Java 5. In Java 1.4 and earlier, a reference to Foo.class would force the static initializer for Foo to be executed, if it has not been executed already. In Java 5 and later, it does not.\n\nSee Oracle's article on Java SE compatibility for more details and examples, and suggestions on how to force class initialization in Java 5+.\n\nSee CWE-563: Assignment to Variable without Use.",
      "ip_parameter_is_dead_but_overwritten": "IP: A parameter is dead upon entry to a method but overwritten\nThe initial value of this parameter is ignored, and the parameter is overwritten here. This often indicates a mistaken belief that the write to the parameter will be conveyed back to the caller.\n\nSee CWE-563: Assignment to Variable without Use.",
      "mf_method_masks_field": "MF: Method defines a variable that obscures a field\nThis method defines a local variable with the same name as a field in this class or a superclass. This may cause the method to read an uninitialized value from the field, leave the field uninitialized, or both.",
      "mf_class_masks_field": "MF: Class defines field that masks a superclass field\nThis class defines a field with the same name as a visible instance field in a superclass. This is confusing, and may indicate an error if methods update or access one of the fields when they wanted the other.",
      "fe_test_if_equal_to_not_a_number": "FE: Doomed test for equality to NaN\nThis code checks to see if a floating point value is equal to the special Not A Number value (e.g., if (x == Double.NaN)). However, because of the special semantics of NaN, no value is equal to Nan, including NaN. Thus, x == Double.NaN always evaluates to false. To check to see if a value contained in x is the special Not A Number value, use Double.isNaN(x) (or Float.isNaN(x) if x is floating point precision).\n\nSee CWE-570: Expression is Always False.",
      "icast_int_2_long_as_instant": "ICAST: int value converted to long and used as absolute time\nThis code converts a 32-bit int value to a 64-bit long value, and then passes that value for a method parameter that requires an absolute time value. An absolute time value is the number of milliseconds since the standard base time known as 'the epoch', namely January 1, 1970, 00:00:00 GMT. For example, the following method, intended to convert seconds since the epoch into a Date, is badly broken:\n\nDate getDate(int seconds) { return new Date(seconds * 1000); }\nThe multiplication is done using 32-bit arithmetic, and then converted to a 64-bit value. When a 32-bit value is converted to 64-bits and used to express an absolute time value, only dates in December 1969 and January 1970 can be represented.\n\nCorrect implementations for the above method are:\n\n// Fails for dates after 2037\nDate getDate(int seconds) { return new Date(seconds * 1000L); }\n\n// better, works for all dates\nDate getDate(long seconds) { return new Date(seconds * 1000); }\nSee CWE-192: Integer Coercion Error.",
      "icast_int_cast_to_double_passed_to_ceil": "ICAST: Integral value cast to double and then passed to Math.ceil\nThis code converts an integral value (e.g., int or long) to a double precision floating point number and then passing the result to the Math.ceil() function, which rounds a double to the next higher integer value. This operation should always be a no-op, since converting an integer to a double should give a number with no fractional part. It is likely that the operation that generated the value to be passed to Math.ceil was intended to be performed using double precision floating point arithmetic.\n\nSee CWE-192: Integer Coercion Error.",
      "icast_int_cast_to_float_passed_to_round": "ICAST: int value cast to float and then passed to Math.round\nThis code converts an int value to a float precision floating point number and then passing the result to the Math.round() function, which returns the int/long closest to the argument. This operation should always be a no-op, since converting an integer to a float should give a number with no fractional part. It is likely that the operation that generated the value to be passed to Math.round was intended to be performed using floating point arithmetic.\n\nSee CWE-192: Integer Coercion Error.",
      "np_null_instanceof": "NP: A known null value is checked to see if it is an instance of a type\nThis instanceof test will always return false, since the value being checked is guaranteed to be null. Although this is safe, make sure it isn't an indication of some misunderstanding or some other logic error.",
      "dmi_long_bits_to_double_invoked_on_int": "DMI: Double.longBitsToDouble invoked on an int\nThe Double.longBitsToDouble method is invoked, but a 32 bit int value is passed as an argument. This almost certainly is not intended and is unlikely to give the intended result.",
      "bc_impossible_cast": "BC: Impossible cast\nThis cast will always throw a ClassCastException. SpotBugs tracks type information from instanceof checks, and also uses more precise information about the types of values returned from methods and loaded from fields. Thus, it may have more precise information than just the declared type of a variable, and can use this to determine that a cast will always throw an exception at runtime.\n\nSee CWE-704: Incorrect Type Conversion or Cast.",
      "bc_impossible_downcast": "BC: Impossible downcast\nThis cast will always throw a ClassCastException. The analysis believes it knows the precise type of the value being cast, and the attempt to downcast it to a subtype will always fail by throwing a ClassCastException.\n\nSee CWE-704: Incorrect Type Conversion or Cast.",
      "bc_impossible_downcast_of_toarray": "BC: Impossible downcast of toArray() result\nThis code is casting the result of calling toArray() on a collection to a type more specific than Object[], as in:\n\nString[] getAsArray(Collection<String> c) {\n    return (String[]) c.toArray();\n}\nThis will usually fail by throwing a ClassCastException. The toArray() of almost all collections return an Object[]. They cannot really do anything else, since the Collection object has no reference to the declared generic type of the collection.\n\nThe correct way to do get an array of a specific type from a collection is to use c.toArray(new String[0]); or c.toArray(new String[c.size()]); (the former is slightly more efficient since late Java 6 updates).\n\nThere is one common/known exception to this. The toArray() method of lists returned by Arrays.asList(...) will return a covariantly typed array. For example, Arrays.asArray(new String[] { 'a' }).toArray() will return a String []. SpotBugs attempts to detect and suppress such cases, but may miss some.\n\nSee CWE-704: Incorrect Type Conversion or Cast.",
      "bc_impossible_instanceof": "BC: instanceof will always return false\nThis instanceof test will always return false. Although this is safe, make sure it isn't an indication of some misunderstanding or some other logic error.",
      "re_possible_unintended_pattern": "RE: “.” or “|” used for regular expression\nA String function is being invoked and '.' or '|' is being passed to a parameter that takes a regular expression as an argument. Is this what you intended? For example\n\ns.replaceAll('.', '/') will return a String in which every character has been replaced by a '/' character\ns.split('.') always returns a zero length array of String\n'ab|cd'.replaceAll('|', '/') will return '/a/b/|/c/d/'\n'ab|cd'.split('|') will return array with six (!) elements: [, a, b, |, c, d]\nConsider using s.replace('.', '/') or s.split('\\\\.') instead.\n\nSee CWE-185: Incorrect Regular Expression.",
      "re_bad_syntax_for_regular_expression": "RE: Invalid syntax for regular expression\nThe code here uses a regular expression that is invalid according to the syntax for regular expressions. This statement will throw a PatternSyntaxException when executed.\n\nSee CWE-185: Incorrect Regular Expression.",
      "re_cant_use_file_separator_as_regular_expression": "RE: File.separator used for regular expression\nThe code here uses File.separator where a regular expression is required. This will fail on Windows platforms, where the File.separator is a backslash, which is interpreted in a regular expression as an escape character. Among other options, you can just use File.separatorChar=='\\\\' ? '\\\\\\' : File.separator instead of File.separator\n\nSee CWE-185: Incorrect Regular Expression.",
      "dls_overwritten_increment": "DLS: Overwritten increment\nThe code performs an increment/decrement operation (e.g., i++ / i--) and then immediately overwrites it. For example, i = i++ / i = i-- immediately overwrites the incremented/decremented value with the original value.\n\nSee CWE-563: Assignment to Variable without Use.",
      "icast_bad_shift_amount": "BSHIFT: 32 bit int shifted by an amount not in the range -31..31\nThe code performs shift of a 32 bit int by a constant amount outside the range -31..31. The effect of this is to use the lower 5 bits of the integer value to decide how much to shift by (e.g., shifting by 40 bits is the same as shifting by 8 bits, and shifting by 32 bits is the same as shifting by zero bits). This probably isn't what was expected, and it is at least confusing.",
      "bshift_wrong_add_priority": "BSHIFT: Possible bad parsing of shift operation\nThe code performs an operation like (x << 8 + y). Although this might be correct, probably it was meant to perform (x << 8) + y, but shift operation has a lower precedence, so it's actually parsed as x << (8 + y).",
      "im_multiplying_result_of_irem": "IM: Integer multiply of result of integer remainder\nThe code multiplies the result of an integer remaining by an integer constant. Be sure you don't have your operator precedence confused. For example i % 60 * 1000 is (i % 60) * 1000, not i % (60 * 1000).",
      "dmi_invoking_hashcode_on_array": "DMI: Invocation of hashCode on an array\nThe code invokes hashCode on an array. Calling hashCode on an array returns the same value as System.identityHashCode, and ignores the contents and length of the array. If you need a hashCode that depends on the contents of an array a, use java.util.Arrays.hashCode(a).",
      "dmi_invoking_tostring_on_array": "USELESS_STRING: Invocation of toString on an array\nThe code invokes toString on an array, which will generate a fairly useless result such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.",
      "dmi_invoking_tostring_on_anonymous_array": "USELESS_STRING: Invocation of toString on an unnamed array\nThe code invokes toString on an (anonymous) array. Calling toString on an array generates a fairly useless result such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.",
      "dmi_bad_month": "DMI: Bad constant value for month\nThis code passes a constant month value outside the expected range of 0..11 to a method.",
      "dmi_calling_next_from_hasnext": "DMI: hasNext method invokes next\nThe hasNext() method invokes the next() method. This is almost certainly wrong, since the hasNext() method is not supposed to change the state of the iterator, and the next method is supposed to change the state of the iterator.",
      "qba_questionable_boolean_assignment": "QBA: Method assigns boolean literal in boolean expression\nThis method assigns a literal boolean value (true or false) to a boolean variable inside an if or while expression. Most probably this was supposed to be a boolean comparison using ==, not an assignment using =.\n\nSee CWE-481: Assigning instead of Comparing.",
      "gc_unrelated_types": "GC: No relationship between generic parameter and method argument\nThis call to a generic collection method contains an argument with an incompatible class from that of the collection's parameter (i.e., the type of the argument is neither a supertype nor a subtype of the corresponding generic type argument). Therefore, it is unlikely that the collection contains any objects that are equal to the method argument used here. Most likely, the wrong value is being passed to the method.\n\nIn general, instances of two unrelated classes are not equal. For example, if the Foo and Bar classes are not related by subtyping, then an instance of Foo should not be equal to an instance of Bar. Among other issues, doing so will likely result in an equals method that is not symmetrical. For example, if you define the Foo class so that a Foo can be equal to a String, your equals method isn't symmetrical since a String can only be equal to a String.\n\nIn rare cases, people do define nonsymmetrical equals methods and still manage to make their code work. Although none of the APIs document or guarantee it, it is typically the case that if you check if a Collection<String> contains a Foo, the equals method of argument (e.g., the equals method of the Foo class) used to perform the equality checks.",
      "dmi_vacuous_self_collection_call": "DMI: Vacuous call to collections\nThis call doesn't make sense. For any collection c, calling c.containsAll(c) should always be true, and c.retainAll(c) should have no effect.",
      "dmi_doh": "DMI: D'oh! A nonsensical method invocation\nThis particular method invocation doesn't make sense, for reasons that should be apparent from inspection.",
      "dmi_collections_should_not_contain_themselves": "DMI: Collections should not contain themselves\nThis call to a generic collection's method would only make sense if a collection contained itself (e.g., if s.contains(s) were true). This is unlikely to be true and would cause problems if it were true (such as the computation of the hash code resulting in infinite recursion). It is likely that the wrong value is being passed as a parameter.",
      "tq_unknown_value_used_where_always_strictly_required": "TQ: Value without a type qualifier used where a value is required to have that qualifier\nA value is being used in a way that requires the value to be annotated with a type qualifier. The type qualifier is strict, so the tool rejects any values that do not have the appropriate annotation.\n\nTo coerce a value to have a strict annotation, define an identity function where the return value is annotated with the strict annotation. This is the only way to turn a non-annotated value into a value with a strict type qualifier annotation.",
      "tq_comparing_values_with_incompatible_type_qualifiers": "TQ: Comparing values with incompatible type qualifiers\nA value specified as carrying a type qualifier annotation is compared with a value that doesn't ever carry that qualifier.\n\nMore precisely, a value annotated with a type qualifier specifying when=ALWAYS is compared with a value that where the same type qualifier specifies when=NEVER.\n\nFor example, say that @NonNegative is a nickname for the type qualifier annotation @Negative(when=When.NEVER). The following code will generate this warning because the return statement requires a @NonNegative value, but receives one that is marked as @Negative.\n\npublic boolean example(@Negative Integer value1, @NonNegative Integer value2) {\n    return value1.equals(value2);\n}",
      "tq_always_value_used_where_never_required": "TQ: Value annotated as carrying a type qualifier used where a value that must not carry that qualifier is required\nA value specified as carrying a type qualifier annotation is consumed in a location or locations requiring that the value not carry that annotation.\n\nMore precisely, a value annotated with a type qualifier specifying when=ALWAYS is guaranteed to reach a use or uses where the same type qualifier specifies when=NEVER.\n\nFor example, say that @NonNegative is a nickname for the type qualifier annotation @Negative(when=When.NEVER). The following code will generate this warning because the return statement requires a @NonNegative value, but receives one that is marked as @Negative.\n\npublic @NonNegative Integer example(@Negative Integer value) {\n    return value;\n}",
      "tq_never_value_used_where_always_required": "TQ: Value annotated as never carrying a type qualifier used where value carrying that qualifier is required\nA value specified as not carrying a type qualifier annotation is guaranteed to be consumed in a location or locations requiring that the value does carry that annotation.\n\nMore precisely, a value annotated with a type qualifier specifying when=NEVER is guaranteed to reach a use or uses where the same type qualifier specifies when=ALWAYS.\n\nTODO: example",
      "tq_maybe_source_value_reaches_always_sink": "TQ: Value that might not carry a type qualifier is always used in a way requires that type qualifier\nA value that is annotated as possibly not being an instance of the values denoted by the type qualifier, and the value is guaranteed to be used in a way that requires values denoted by that type qualifier.",
      "tq_maybe_source_value_reaches_never_sink": "TQ: Value that might carry a type qualifier is always used in a way prohibits it from having that type qualifier\nA value that is annotated as possibly being an instance of the values denoted by the type qualifier, and the value is guaranteed to be used in a way that prohibits values denoted by that type qualifier.",
      "fb_unexpected_warning": "FB: Unexpected/undesired warning from SpotBugs\nSpotBugs generated a warning that, according to a @NoWarning annotation, is unexpected or undesired.",
      "fb_missing_expected_warning": "FB: Missing expected or desired warning from SpotBugs\nSpotBugs didn't generate a warning that, according to an @ExpectedWarning annotation, is expected or desired.",
      "eos_bad_end_of_stream_check": "EOS: Data read is converted before comparison to -1\nThe method java.io.FileInputStream.read() returns an int. If this int is converted to a byte then -1 (which indicates an EOF) and the byte 0xFF become indistinguishable, this comparing the (converted) result to -1 causes the read (probably in a loop) to end prematurely if the character 0xFF is met. Similarly, the method java.io.FileReader.read() also returns an int. If it is converted to a char then -1 becomes 0xFFFF which is Character.MAX_VALUE. Comparing the result to -1 is pointless, since characters are unsigned in Java. If the checking for EOF is the condition of a loop then this loop is infinite.\n\nSee SEI CERT rule FIO08-J. Distinguish between characters or bytes read from a stream and -1.",
      "fl_floats_as_loop_counters": "FL: Do not use floating-point variables as loop counters\nUsing floating-point variables should not be used as loop counters, as they are not precise, which may result in incorrect loops. A loop counter is a variable that is changed with each iteration and controls when the loop should terminate. It is decreased or increased by a fixed amount each iteration.\n\nSee rule NUM09-J and CWE-1339: Insufficient Precision or Accuracy of a Real Number.",
      "sing_singleton_implements_cloneable": "SING: Class using singleton design pattern directly implements Cloneable interface.\nIf a class using singleton design pattern directly implements the Cloneable interface, it is possible to create a copy of the object, thus violating the singleton pattern.\nTherefore, implementing the Cloneable interface should be avoided.\n\nFor more information, see: SEI CERT MSC07-J, and CWE-543: Use of Singleton Pattern Without Synchronization in a Multithreaded Context.",
      "sing_singleton_indirectly_implements_cloneable": "SING: Class using singleton design pattern indirectly implements Cloneable interface.\nIf a class using singleton design pattern indirectly implements the Cloneable interface, it is possible to create a copy of the object, thus violating the singleton pattern.\nTherefore, implementing the Cloneable interface should be avoided. If that's not possible because of an extended super-class, the solution would be overriding the clone method to unconditionally throw CloneNotSupportedException.\n\nFor more information, see: SEI CERT MSC07-J, and CWE-543: Use of Singleton Pattern Without Synchronization in a Multithreaded Context.",
      "sing_singleton_implements_clone_method": "SING: Class using singleton design pattern implements clone() method without being an unconditional CloneNotSupportedException-thrower.\nThis class is using singleton design pattern and does not implement the Cloneable interface, but implements the clone() method without being an unconditional CloneNotSupportedException-thrower. With that, it is possible to create a copy of the object, thus violating the singleton pattern.\nTherefore, implementing the clone method should be avoided, otherwise the solution would be overriding the clone method to unconditionally throw CloneNotSupportedException.\n\nFor more information, see: SEI CERT MSC07-J, and CWE-543: Use of Singleton Pattern Without Synchronization in a Multithreaded Context.",
      "sing_singleton_has_nonprivate_constructor": "SING: Class using singleton design pattern has non-private constructor.\nThis class is using singleton design pattern and has non-private constructor (please note that a default constructor might exist which is not private). Given that, it is possible to create a copy of the object, thus violating the singleton pattern.\nThe easier solution would be making the constructor private.\n\nFor more information, see: SEI CERT MSC07-J, and CWE-543: Use of Singleton Pattern Without Synchronization in a Multithreaded Context.",
      "sing_singleton_implements_serializable": "SING: Class using singleton design pattern directly or indirectly implements Serializable interface.\nThis class (using singleton design pattern) directly or indirectly implements the Serializable interface, which allows the class to be serialized.\nDeserialization makes multiple instantiation of a singleton class possible, and therefore should be avoided.\n\nFor more information, see: SEI CERT MSC07-J, and CWE-543: Use of Singleton Pattern Without Synchronization in a Multithreaded Context.",
      "sing_singleton_getter_not_synchronized": "SING: Instance-getter method of class using singleton design pattern is not synchronized.\nInstance-getter method of class using singleton design pattern is not synchronized. When this method is invoked by two or more threads simultaneously, multiple instantiation of a singleton class becomes possible.\n\nFor more information, see: SEI CERT MSC07-J, and CWE-543: Use of Singleton Pattern Without Synchronization in a Multithreaded Context.",
      "hsm_hiding_method": "HSM: Method hiding should be avoided.\nHiding happens when a subclass defines a static method with same header (signature plus return type) as in any of the super classes. In the event of method hiding the invoked method is determined based on the specific qualified name or method invocation expression used at the calling site. The results are often unexpected, although the Java language provides unambiguous rules for method invocation for method hiding. Moreover, method hiding and method overriding is often confused by programmers. Consequently, programmers should avoid the method hiding. Programmer should declare the respective method non-static or restrict it as private to eradicate the problem.\nSee SEI CERT rule MET07-J. Never declare a class method that hides a method declared in a superclass or superinterface.",
      "skipped_class_too_big": "SKIPPED: Class too big for analysis\nThis class is bigger than can be effectively handled, and was not fully analyzed for errors.",
      "unknown": "TEST: Unknown bug pattern\nA warning was recorded, but SpotBugs cannot find the description of this bug pattern and so cannot describe it. This should occur only in cases of a bug in SpotBugs or its configuration, or perhaps if an analysis was generated using a plugin, but that plugin is not currently loaded. .",
      "testing": "TEST: Testing\nThis bug pattern is only generated by new, incompletely implemented bug detectors.",
      "testing1": "TEST: Testing 1\nThis bug pattern is only generated by new, incompletely implemented bug detectors.",
      "testing2": "TEST: Testing 2\nThis bug pattern is only generated by new, incompletely implemented bug detectors.",
      "testing3": "TEST: Testing 3\nThis bug pattern is only generated by new, incompletely implemented bug detectors.",
      "obl_unsatisfied_obligation": "OBL: Method may fail to clean up stream or resource\nThis method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation.\n\nIn general, if a method opens a stream or other resource, the method should use a try/finally block to ensure that the stream or resource is cleaned up before the method returns.\n\nThis bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check:\n\ncontributing guideline\nmailinglist\nIn particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us.\n\nSee Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes (PDF), for a description of the analysis technique.",
      "obl_unsatisfied_obligation_exception_edge": "OBL: Method may fail to clean up stream or resource on checked exception\nThis method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation.\n\nIn general, if a method opens a stream or other resource, the method should use a try/finally block to ensure that the stream or resource is cleaned up before the method returns.\n\nThis bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check:\n\ncontributing guideline\nmailinglist\nIn particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us.\n\nSee Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes (PDF), for a description of the analysis technique.",
      "lg_lost_logger_due_to_weak_reference": "LG: Potential lost logger changes due to weak reference in OpenJDK\nOpenJDK introduces a potential incompatibility. In particular, the java.util.logging.Logger behavior has changed. Instead of using strong references, it now uses weak references internally. That's a reasonable change, but unfortunately some code relies on the old behavior - when changing logger configuration, it simply drops the logger reference. That means that the garbage collector is free to reclaim that memory, which means that the logger configuration is lost. For example, consider:\n\npublic static void initLogging() throws Exception {\n    Logger logger = Logger.getLogger('edu.umd.cs');\n    logger.addHandler(new FileHandler()); // call to change logger configuration\n    logger.setUseParentHandlers(false); // another call to change logger configuration\n}\nThe logger reference is lost at the end of the method (it doesn't escape the method), so if you have a garbage collection cycle just after the call to initLogging, the logger configuration is lost (because Logger only keeps weak references).\n\npublic static void main(String[] args) throws Exception {\n    initLogging(); // adds a file handler to the logger\n    System.gc(); // logger configuration lost\n    Logger.getLogger('edu.umd.cs').info('Some message'); // this isn't logged to the file as expected\n}\nUlf Ochsenfahrt and Eric Fellheimer",
      "dm_convert_case": "Dm: Consider using Locale parameterized version of invoked method\nA String is being converted to upper or lowercase, using the platform's default encoding. This may result in improper conversions when used with international characters. Use the\n\nString.toUpperCase( Locale l )\nString.toLowerCase( Locale l )\nversions instead.",
      "dm_default_encoding": "Dm: Reliance on default encoding\nFound a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behavior to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.\n\nSee CWE-173: Improper Handling of Alternate Encoding.",
      "dp_do_inside_do_privileged": "DP: Method invoked that should be only be invoked inside a doPrivileged block\nThis code invokes a method that requires a security permission check. If this code will be granted security permissions, but might be invoked by code that does not have security permissions, then the invocation needs to occur inside a doPrivileged block.\n\nThe java.security.AccessController class, which contains the doPrivileged methods, got deprecated in Java 17 (see JEP 411), and removed in Java 24 (see JEP 486). For this reason, this bug isn't reported in classes targeted Java 17 and above.\nSee CWE-266: Incorrect Privilege Assignment.",
      "dp_create_classloader_inside_do_privileged": "DP: Classloaders should only be created inside doPrivileged block\nThis code creates a classloader, which needs permission if a security manage is installed. If this code might be invoked by code that does not have security permissions, then the classloader creation needs to occur inside a doPrivileged block.\n\nThe java.security.AccessController class, which contains the doPrivileged methods, got deprecated in Java 17 (see JEP 411), and removed in Java 24 (see JEP 486). For this reason, this bug isn't reported in classes targeted Java 17 and above.\nSee CWE-266: Incorrect Privilege Assignment.",
      "fi_public_should_be_protected": "FI: Finalizer should be protected, not public\nA class's finalize() method should have protected access, not public.\n\nSee CWE-583: finalize() Method Declared Public.",
      "ms_expose_rep": "MS: Public static method may expose internal representation by returning a mutable object or array\nA public static method returns a reference to a mutable object or an array that is part of the static state of the class. Any code that calls this method can freely modify the underlying array. One fix is to return a copy of the array.",
      "ms_expose_buf": "MS: May expose internal representation by returning a buffer sharing non-public data\nA public static method either returns a buffer (java.nio.*Buffer) which wraps an array that is part of the static state of the class by holding a reference only to this same array or it returns a shallow-copy of a buffer that is part of the static stat of the class which shares its reference with the original buffer. Any code that calls this method can freely modify the underlying array. One fix is to return a read-only buffer or a new buffer with a copy of the array.",
      "ei_expose_rep": "EI: May expose internal representation by returning reference to mutable object\nReturning a reference to a mutable object value stored in one of the object's fields exposes the internal representation of the object.  If instances are accessed by untrusted code, and unchecked changes to the mutable object would compromise security or other important properties, you will need to do something different. Returning a new copy of the object is better approach in many situations.\n\nSee CWE-374: Passing Mutable Objects to an Untrusted Method.",
      "ei_expose_buf": "EI: May expose internal representation by returning a buffer sharing non-public data\nReturning a reference to a buffer (java.nio.*Buffer) which wraps an array stored in one of the object's fields exposes the internal representation of the array elements because the buffer only stores a reference to the array instead of copying its content. Similarly, returning a shallow-copy of such a buffer (using its duplicate() method) stored in one of the object's fields also exposes the internal representation of the buffer.  If instances are accessed by untrusted code, and unchecked changes to the array would compromise security or other important properties, you will need to do something different. Returning a read-only buffer (using its asReadOnly() method) or copying the array to a new buffer (using its put() method) is a better approach in many situations.\n\nSee CWE-374: Passing Mutable Objects to an Untrusted Method.",
      "ei_expose_rep2": "EI2: May expose internal representation by incorporating reference to mutable object\nThis code stores a reference to an externally mutable object into the internal representation of the object.  If instances are accessed by untrusted code, and unchecked changes to the mutable object would compromise security or other important properties, you will need to do something different. Storing a copy of the object is better approach in many situations.\n\nSee CWE-374: Passing Mutable Objects to an Untrusted Method.",
      "ei_expose_static_rep2": "MS: May expose internal static state by storing a mutable object into a static field\nThis code stores a reference to an externally mutable object into a static field. If unchecked changes to the mutable object would compromise security or other important properties, you will need to do something different. Storing a copy of the object is better approach in many situations.",
      "ei_expose_buf2": "EI2: May expose internal representation by creating a buffer which incorporates reference to array\nThis code creates a buffer which stores a reference to an external array or the array of an external buffer into the internal representation of the object.  If instances are accessed by untrusted code, and unchecked changes to the array would compromise security or other important properties, you will need to do something different. Storing a copy of the array is a better approach in many situations.\n\nSee CWE-374: Passing Mutable Objects to an Untrusted Method.",
      "ei_expose_static_buf2": "MS: May expose internal static state by creating a buffer which stores an external array into a static field\nThis code creates a buffer which stores a reference to an external array or the array of an external buffer into a static field. If unchecked changes to the array would compromise security or other important properties, you will need to do something different. Storing a copy of the array is a better approach in many situations.",
      "ms_ooi_pkgprotect": "MS: Field should be moved out of an interface and made package protected\nA final static field that is defined in an interface references a mutable object such as an array or hashtable. This mutable object could be changed by malicious code or by accident from another package. To solve this, the field needs to be moved to a class and made package protected to avoid this vulnerability.",
      "ms_final_pkgprotect": "MS: Field should be both final and package protected\nA mutable static field could be changed by malicious code or by accident from another package. The field could be made package protected and/or made final to avoid this vulnerability.",
      "ms_should_be_final": "MS: Field isn't final but should be\nThis public static or protected static field is not final, and could be changed by malicious code or by accident from another package. The field could be made final to avoid this vulnerability.\n\nSee CWE-500: Public Static Field Not Marked Final.",
      "ms_should_be_refactored_to_be_final": "MS: Field isn't final but should be refactored to be so\nThis public static or protected static field is not final, and could be changed by malicious code or by accident from another package. The field could be made final to avoid this vulnerability. However, the static initializer contains more than one write to the field, so doing so will require some refactoring.\n\nSee CWE-500: Public Static Field Not Marked Final.",
      "ms_pkgprotect": "MS: Field should be package protected\nA mutable static field could be changed by malicious code or by accident. The field could be made package protected to avoid this vulnerability.\n\nSee CWE-607: Public Static Final Field References Mutable Object.",
      "ms_mutable_hashtable": "MS: Field is a mutable Hashtable\nA final static field references a Hashtable and can be accessed by malicious code or by accident from another package. This code can freely modify the contents of the Hashtable.",
      "ms_mutable_array": "MS: Field is a mutable array\nA final static field references an array and can be accessed by malicious code or by accident from another package. This code can freely modify the contents of the array.",
      "ms_mutable_collection": "MS: Field is a mutable collection\nA mutable collection instance is assigned to a final static field, thus can be changed by malicious code or by accident from another package. Consider wrapping this field into Collections.unmodifiableSet/List/Map/etc. to avoid this vulnerability.",
      "ms_mutable_collection_pkgprotect": "MS: Field is a mutable collection which should be package protected\nA mutable collection instance is assigned to a final static field, thus can be changed by malicious code or by accident from another package. The field could be made package protected to avoid this vulnerability. Alternatively you may wrap this field into Collections.unmodifiableSet/List/Map/etc. to avoid this vulnerability.",
      "ms_cannot_be_final": "MS: Field isn't final and cannot be protected from malicious code\nA mutable static field could be changed by malicious code or by accident from another package. Unfortunately, the way the field is used doesn't allow any easy fix to this problem.",
      "reflc_reflection_may_increase_accessibility_of_class": "REFLC: Public method uses reflection to create a class it gets in its parameter which could increase the accessibility of any class\nSEI CERT SEC05-J rule forbids the use of reflection to increase accessibility of classes, methods or fields. If a class in a package provides a public method which takes an instance of java.lang.Class as its parameter and calls its newInstance() method then it increases accessibility of classes in the same package without public constructors. An attacker code may call this method and pass such class to create an instance of it. This should be avoided by either making the method non-public or by checking for package access permission on the package. A third possibility is to use the java.beans.Beans.instantiate() method instead of java.lang.Class.newInstance() which checks whether the Class object being received has any public constructors.\n\nSee CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection').",
      "reflf_reflection_may_increase_accessibility_of_field": "REFLF: Public method uses reflection to modify a field it gets in its parameter which could increase the accessibility of any class\nSEI CERT SEC05-J rule forbids the use of reflection to increase accessibility of classes, methods or fields. If a class in a package provides a public method which takes an instance of java.lang.reflect.Field as its parameter and calls a setter (or setAccessible()) method then it increases accessibility of fields in the same package which are private, protected or package private. An attacker code may call this method and pass such field to change it. This should be avoided by either making the method non-public or by checking for package access permission on the package.\n\nSee CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection').",
      "mc_overridable_method_call_in_constructor": "MC: An overridable method is called from a constructor\nCalling an overridable method during in a constructor may result in the use of uninitialized data. It may also leak the this reference of the partially constructed object. Only static, final or private methods should be invoked from a constructor.\n\nSee SEI CERT rule MET05-J. Ensure that constructors do not call overridable methods.",
      "mc_overridable_method_call_in_clone": "MC: An overridable method is called from the clone() method.\nCalling overridable methods from the clone() method is insecure because a subclass could override the method, affecting the behavior of clone(). It can also observe or modify the clone object in a partially initialized state. Only static, final or private methods should be invoked from the clone() method.\n\nSee SEI CERT rule MET06-J. Do not invoke overridable methods in clone().",
      "mc_overridable_method_call_in_read_object": "MC: An overridable method is called from the readObject method.\nThe readObject() method must not call any overridable methods. Invoking overridable methods from the readObject() method can provide the overriding method with access to the object's state before it is fully initialized. This premature access is possible because, in deserialization, readObject plays the role of object constructor and therefore object initialization is not complete until readObject exits.\n\n\nSee SEI CERT rule SER09-J. Do not invoke overridable methods from the readObject() method.",
      "perm_super_not_called_in_getpermissions": "PERM: Custom class loader does not call its superclass's getPermissions()\nSEI CERT rule SEC07-J requires that custom class loaders must always call their superclass's getPermissions() method in their own getPermissions() method to initialize the object they return at the end. Omitting it means that a class defined using this custom class loader has permissions that are completely independent of those specified in the systemwide policy file. In effect, the class's permissions override them.",
      "usc_potential_security_check_based_on_untrusted_source": "USC: Potential security check based on untrusted source.\nA public method of a public class may be called from outside the package which means that untrusted data may be passed to it. Calling a method before the doPrivileged to check its return value and then calling the same method inside the class is dangerous if the method or its enclosing class is not final. An attacker may pass an instance of a malicious descendant of the class instead of an instance of the expected one where this method is overridden in a way that it returns different values upon different invocations. For example, a method returning a file path may return a harmless path to check before entering the doPrivileged block and then a sensitive file upon the call inside the doPrivileged block. To avoid such scenario defensively copy the object received in the parameter, e.g. by using the copy constructor of the class used as the type of the formal parameter. This ensures that the method behaves exactly as expected.\n\nSee SEI CERT rule SEC02-J. Do not base security checks on untrusted sources, CWE-302: Authentication Bypass by Assumed-Immutable Data, and CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection').\n\nThe java.security.AccessController class, which contains the doPrivileged methods, got deprecated in Java 17 (see JEP 411), and removed in Java 24 (see JEP 486). For this reason, this bug isn't reported in classes targeted Ja",
      "vsc_vulnerable_security_check_methods": "va 17 and above.\nVSC: Non-Private and non-final security check methods are vulnerable\nMethods that perform security checks should be prevented from being overridden, so they must be declared as private or final. Otherwise, these methods can be compromised when a malicious subclass overrides them and omits the checks.\n\nSee SEI CERT rule MET03-J. Methods that perform a security check must be declared private or final.",
      "at_operation_sequence_on_concurrent_abstraction": "AT: Sequence of calls to concurrent abstraction may not be atomic\nThis code contains a sequence of calls to a concurrent abstraction (such as a concurrent hash map). These calls will not be executed atomically.\n\nSee the following references: CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'), CWE-366: Race Condition within a Thread CWE-662: Improper Synchronization",
      "at_unsafe_resource_access_in_thread": "AT: Operation on resource is not safe in a multithreaded context\nThis code contains an operation on a resource that is not safe in a multithreaded context. The resource may be accessed by multiple threads concurrently without proper synchronization. This may lead to data corruption. Use synchronization or other concurrency control mechanisms to ensure that the resource is accessed safely.\n\nSee the related SEI CERT rule, but the detector is not restricted to chained methods: VNA04-J. Ensure that calls to chained methods are atomic.\n\nSee the following references: CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'), CWE-366: Race Condition within a Thread CWE-662: Improper Synchronization",
      "stcal_static_calendar_instance": "STCAL: Static Calendar field\nEven though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see random ArrayIndexOutOfBoundsExceptions or IndexOutOfBoundsExceptions in sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate().\n\nYou may also experience serialization problems.\n\nUsing an instance field is recommended.\n\nFor more information on this see JDK Bug #6231579 and JDK Bug #6178997.",
      "stcal_static_simple_date_format_instance": "STCAL: Static DateFormat\nAs the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application.\n\nYou may also experience serialization problems.\n\nUsing an instance field is recommended.\n\nFor more information on this see JDK Bug #6231579 and JDK Bug #6178997.",
      "stcal_invoke_on_static_calendar_instance": "STCAL: Call to static Calendar\nEven though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use. The detector has found a call to an instance of Calendar that has been obtained via a static field. This looks suspicious.\n\nFor more information on this see JDK Bug #6231579 and JDK Bug #6178997.",
      "stcal_invoke_on_static_date_format_instance": "STCAL: Call to static DateFormat\nAs the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. The detector has found a call to an instance of DateFormat that has been obtained via a static field. This looks suspicious.\n\nFor more information on this see JDK Bug #6231579 and JDK Bug #6178997.",
      "np_sync_and_null_check_field": "NP: Synchronize and null check on the same field.\nSince the field is synchronized on, it seems not likely to be null. If it is null and then synchronized on a NullPointerException will be thrown and the check would be pointless. Better to synchronize on another field.",
      "vo_volatile_reference_to_array": "VO: A volatile reference to an array doesn't treat the array elements as volatile\nThis declares a volatile reference to an array, which might not be what you want. With a volatile reference to an array, reads and writes of the reference to the array are treated as volatile, but the array elements are non-volatile. To get volatile array elements, you will need to use one of the atomic array classes in java.util.concurrent (provided in Java 5.0).",
      "vo_volatile_increment": "VO: An increment to a volatile field isn't atomic\nThis code increments/decrements a volatile field. Increments/Decrements of volatile fields aren't atomic. If more than one thread is incrementing/decrementing the field at the same time, increments/decrements could be lost.\n\nSee CWE-567: Unsynchronized Access to Shared Data in a Multithreaded Context.",
      "dm_monitor_wait_on_condition": "Dm: Monitor wait() called on Condition\nThis method calls wait() on a java.util.concurrent.locks.Condition object.  Waiting for a Condition should be done using one of the await() methods defined by the Condition interface.",
      "dm_useless_thread": "Dm: A thread was created using the default empty run method\nThis method creates a thread without specifying a run method either by deriving from the Thread class, or by passing a Runnable object. This thread, then, does nothing but waste time.",
      "dc_doublecheck": "DC: Possible double-check of field\nThis method may contain an instance of double-checked locking.  This idiom is not correct according to the semantics of the Java memory model.  For more information, see the web page http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html and CWE-609: Double-Checked Locking.",
      "dc_partially_constructed": "DC: Possible exposure of partially initialized object\nLooks like this method uses lazy field initialization with double-checked locking. While the field is correctly declared as volatile, it's possible that the internal structure of the object is changed after the field assignment, thus another thread may see the partially initialized object.\n\nTo fix this problem consider storing the object into the local variable first and save it to the volatile field only after it's fully constructed.\n\nSee CWE-609: Double-Checked Locking.",
      "dl_synchronization_on_shared_constant": "DL: Synchronization on String literal\nThe code synchronizes on String literal.\n\nprivate static String LOCK = 'LOCK';\n...\nsynchronized(LOCK) {\n    ...\n}\n...\nConstant Strings are interned and shared across all other classes loaded by the JVM. Thus, this code is locking on something that other code might also be locking. This could result in very strange and hard to diagnose blocking and deadlock behavior. See http://www.javalobby.org/java/forums/t96352.html and http://jira.codehaus.org/browse/JETTY-352.\n\nSee CERT LCK01-J. Do not synchronize on objects that may be reused and CWE-412: Unrestricted Externally Accessible Lock for more information.",
      "dl_synchronization_on_boolean": "DL: Synchronization on Boolean\nThe code synchronizes on a boxed primitive constant, such as a Boolean.\n\nprivate static Boolean inited = Boolean.FALSE;\n...\nsynchronized(inited) {\n    if (!inited) {\n        init();\n        inited = Boolean.TRUE;\n    }\n}\n...\nSince there normally exist only two Boolean objects, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness and possible deadlock.\n\nSee CERT LCK01-J. Do not synchronize on objects that may be reused and CWE-412: Unrestricted Externally Accessible Lock for more information.",
      "dl_synchronization_on_boxed_primitive": "DL: Synchronization on boxed primitive\nThe code synchronizes on a boxed primitive constant, such as an Integer.\n\nprivate static Integer count = 0;\n...\nsynchronized(count) {\n    count++;\n}\n...\nSince Integer objects can be cached and shared, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness and possible deadlock.\n\nSee CERT LCK01-J. Do not synchronize on objects that may be reused and CWE-412: Unrestricted Externally Accessible Lock for more information.",
      "dl_synchronization_on_unshared_boxed_primitive": "DL: Synchronization on boxed primitive values\nThe code synchronizes on an apparently unshared boxed primitive, such as an Integer.\n\nprivate static final Integer fileLock = new Integer(1);\n...\nsynchronized(fileLock) {\n    .. do something ..\n}\n...\nIt would be much better, in this code, to redeclare fileLock as\n\nprivate static final Object fileLock = new Object();\nThe existing code might be OK, but it is confusing and a future refactoring, such as the 'Remove Boxing' refactoring in IntelliJ, might replace this with the use of an interned Integer object shared throughout the JVM, leading to very confusing behavior and potential deadlock.\n\nSee CERT LCK01-J. Do not synchronize on objects that may be reused and CWE-412: Unrestricted Externally Accessible Lock for more information.",
      "dl_synchronization_on_interned_string": "DL: Synchronization on interned String\nThe code synchronizes on interned String.\n\nprivate static String LOCK = new String('LOCK').intern();\n...\nsynchronized(LOCK) {\n    ...\n}\n...\nConstant Strings are interned and shared across all other classes loaded by the JVM. Thus, this code is locking on something that other code might also be locking. This could result in very strange and hard to diagnose blocking and deadlock behavior. See http://www.javalobby.org/java/forums/t96352.html and http://jira.codehaus.org/browse/JETTY-352.\n\nSee CERT LCK01-J. Do not synchronize on objects that may be reused and CWE-412: Unrestricted Externally Accessible Lock for more information.",
      "wl_using_getclass_rather_than_class_literal": "WL: Synchronization on getClass rather than class literal\nThis instance method synchronizes on this.getClass(). If this class is subclassed, subclasses will synchronize on the class object for the subclass, which isn't likely what was intended. For example, consider this code from java.awt.Label:\n\nprivate static final String base = 'label';\nprivate static int nameCounter = 0;\n\nString constructComponentName() {\n    synchronized (getClass()) {\n        return base + nameCounter++;\n    }\n}\nSubclasses of Label won't synchronize on the same subclass, giving rise to a datarace. Instead, this code should be synchronizing on Label.class.\n\nprivate static final String base = 'label';\nprivate static int nameCounter = 0;\n\nString constructComponentName() {\n    synchronized (Label.class) {\n        return base + nameCounter++;\n    }\n}\nBug pattern contributed by Jason Mehrens.\n\nSee CWE-821: Incorrect Synchronization.",
      "e_sync_empty_sync": "ESync: Empty synchronized block\nThe code contains an empty synchronized block:\n\nsynchronized() {\n}\nEmpty synchronized blocks are far more subtle and hard to use correctly than most people recognize, and empty synchronized blocks are almost never a better solution than less contrived solutions.\n\nSee CWE-585: Empty Synchronized Block.",
      "msf_mutable_servlet_field": "MSF: Mutable servlet field\nA web server generally only creates one instance of servlet or JSP class (i.e., treats the class as a Singleton), and will have multiple threads invoke methods on that instance to service multiple simultaneous requests. Thus, having a mutable instance field generally creates race conditions.",
      "is2_inconsistent_sync": "IS: Inconsistent synchronization\nThe fields of this class appear to be accessed inconsistently with respect to synchronization.  This bug report indicates that the bug pattern detector judged that\n\nThe class contains a mix of locked and unlocked accesses,\nThe class is not annotated as javax.annotation.concurrent.NotThreadSafe,\nAt least one locked access was performed by one of the class's own methods, and\nThe number of unsynchronized field accesses (reads and writes) was no more than one third of all accesses, with writes being weighed twice as high as reads\nA typical bug matching this bug pattern is forgetting to synchronize one of the methods in a class that is intended to be thread-safe.\n\nYou can select the nodes labeled 'Unsynchronized access' to show the code locations where the detector believed that a field was accessed without synchronization.\n\nNote that there are various sources of inaccuracy in this detector; for example, the detector cannot statically detect all situations in which a lock is held.  Also, even when the detector is accurate in distinguishing locked vs. unlocked accesses, the code in question may still be correct.\n\nSee CWE-366: Race Condition within a Thread.",
      "nn_naked_notify": "NN: Naked notify\nA call to notify() or notifyAll() was made without any (apparent) accompanying modification to mutable object state.  In general, calling a notify method on a monitor is done because some condition another thread is waiting for has become true.  However, for the condition to be meaningful, it must involve a heap object that is visible to both threads.\n\nThis bug does not necessarily indicate an error, since the change to mutable object state may have taken place in a method which then called the method containing the notification.",
      "ru_invoke_run": "Ru: Invokes run on a thread (did you mean to start it instead?)\nThis method explicitly invokes run() on an object.  In general, classes implement the Runnable interface because they are going to have their run() method invoked in a new thread, in which case Thread.start() is the right method to call.\n\nSee CWE-572: Call to Thread run() instead of start().",
      "sp_spin_on_field": "SP: Method spins on field\nThis method spins in a loop which reads a field.  The compiler may legally hoist the read out of the loop, turning the code into an infinite loop.  The class should be changed so it uses proper synchronization (including wait and notify calls).\n\nSee CWE-662: Improper Synchronization.",
      "tlw_two_lock_wait": "TLW: Wait with two locks held\nWaiting on a monitor while two locks are held may cause deadlock. Performing a wait only releases the lock on the object being waited on, not any other locks. This not necessarily a bug, but is worth examining closely.\n\nSee CWE-833: Deadlock.",
      "uw_uncond_wait": "UW: Unconditional wait\nThis method contains a call to java.lang.Object.wait() which is not guarded by conditional control flow. The code should verify that condition it intends to wait for is not already satisfied before calling wait; any previous notifications will be ignored.",
      "ug_sync_set_unsync_get": "UG: Unsynchronized get method, synchronized set method\nThis class contains similarly-named get and set methods where the set method is synchronized and the get method is not.  This may result in incorrect behavior at runtime, as callers of the get method will not necessarily see a consistent state for the object.  The get method should be made synchronized.\n\nSee CWE-820: Missing Synchronization.",
      "is_field_not_guarded": "IS: Field not guarded against concurrent access\nThis field is annotated with net.jcip.annotations.GuardedBy or javax.annotation.concurrent.GuardedBy, but can be accessed in a way that seems to violate those annotations.\n\nSee CWE-366: Race Condition within a Thread.",
      "ml_sync_on_field_to_guard_changing_that_field": "ML: Synchronization on field in futile attempt to guard that field\nThis method synchronizes on a field in what appears to be an attempt to guard against simultaneous updates to that field. But guarding a field gets a lock on the referenced object, not on the field. This may not provide the mutual exclusion you need, and other threads might be obtaining locks on the referenced objects (for other purposes). An example of this pattern would be:\n\nprivate Long myNtfSeqNbrCounter = new Long(0);\nprivate Long getNotificationSequenceNumber() {\n     Long result = null;\n     synchronized(myNtfSeqNbrCounter) {\n         result = new Long(myNtfSeqNbrCounter.longValue() + 1);\n         myNtfSeqNbrCounter = new Long(result.longValue());\n     }\n     return result;\n}\nSee CWE-821: Incorrect Synchronization.",
      "ml_sync_on_updated_field": "ML: Method synchronizes on an updated field\nThis method synchronizes on an object referenced from a mutable field. This is unlikely to have useful semantics, since different threads may be synchronizing on different objects.\n\nSee CWE-821: Incorrect Synchronization.",
      "ws_writeobject_sync": "WS: Class's writeObject() method is synchronized but nothing else is\nThis class has a writeObject() method which is synchronized; however, no other method of the class is synchronized.\n\nSee CWE-820: Missing Synchronization.",
      "rs_readobject_sync": "RS: Class's readObject() method is synchronized\nThis serializable class defines a readObject() which is synchronized.  By definition, an object created by deserialization is only reachable by one thread, and thus there is no need for readObject() to be synchronized.  If the readObject() method itself is causing the object to become visible to another thread, that is an example of very dubious coding style.\n\nSee CWE-820: Missing Synchronization.",
      "sc_start_in_ctor": "SC: Constructor invokes Thread.start()\nThe constructor starts a thread. This is likely to be wrong if the class is ever extended/subclassed, since the thread will be started before the subclass constructor is started.",
      "wa_not_in_loop": "Wa: Wait not in loop\nThis method contains a call to java.lang.Object.wait() which is not in a loop.  If the monitor is used for multiple conditions, the condition the caller intended to wait for might not be the one that actually occurred.",
      "wa_await_not_in_loop": "Wa: Condition.await() not in loop\nThis method contains a call to java.util.concurrent.await() (or variants) which is not in a loop.  If the object is used for multiple conditions, the condition the caller intended to wait for might not be the one that actually occurred.",
      "no_notify_not_notifyall": "No: Using notify() rather than notifyAll()\nThis method calls notify() rather than notifyAll().  Java monitors are often used for multiple conditions.  Calling notify() only wakes up one thread, meaning that the thread woken up might not be the one waiting for the condition that the caller just satisfied.",
      "ul_unreleased_lock": "UL: Method does not release lock on all paths\nThis method acquires a JSR-166 (java.util.concurrent) lock, but does not release it on all paths out of the method. In general, the correct idiom for using a JSR-166 lock is:\n\nLock l = ...;\nl.lock();\ntry {\n    // do something\n} finally {\n    l.unlock();\n}\nSee CWE-413: Improper Resource Locking and CWE-459: Incomplete Cleanup.<\\p>",
      "ul_unreleased_lock_exception_path": "UL: Method does not release lock on all exception paths\nThis method acquires a JSR-166 (java.util.concurrent) lock, but does not release it on all exception paths out of the method. In general, the correct idiom for using a JSR-166 lock is:\n\nLock l = ...;\nl.lock();\ntry {\n    // do something\n} finally {\n    l.unlock();\n}\nSee CWE-413: Improper Resource Locking and CWE-459: Incomplete Cleanup.<\\p>",
      "mwn_mismatched_wait": "MWN: Mismatched wait()\nThis method calls Object.wait() without obviously holding a lock on the object.  Calling wait() without a lock held will result in an IllegalMonitorStateException being thrown.",
      "mwn_mismatched_notify": "MWN: Mismatched notify()\nThis method calls Object.notify() or Object.notifyAll() without obviously holding a lock on the object.  Calling notify() or notifyAll() without a lock held will result in an IllegalMonitorStateException being thrown.",
      "li_lazy_init_static": "LI: Incorrect lazy initialization of static field\nThis method contains an unsynchronized lazy initialization of a non-volatile static field. Because the compiler or processor may reorder instructions, threads are not guaranteed to see a completely initialized object, if the method can be called by multiple threads. You can make the field volatile to correct the problem. For more information, see the Java Memory Model web site.\n\nSee CWE-543: Use of Singleton Pattern Without Synchronization in a Multithreaded Context.",
      "li_lazy_init_update_static": "LI: Incorrect lazy initialization and update of static field\nThis method contains an unsynchronized lazy initialization of a static field. After the field is set, the object stored into that location is further updated or accessed. The setting of the field is visible to other threads as soon as it is set. If the further accesses in the method that set the field serve to initialize the object, then you have a very serious multithreading bug, unless something else prevents any other thread from accessing the stored object until it is fully initialized.\n\nEven if you feel confident that the method is never called by multiple threads, it might be better to not set the static field until the value you are setting it to is fully populated/initialized.\n\nSee CWE-543: Use of Singleton Pattern Without Synchronization in a Multithreaded Context.",
      "jlm_jsr166_utilconcurrent_monitorenter": "JLM: Synchronization performed on util.concurrent instance\nThis method performs synchronization on an object that is an instance of a class from the java.util.concurrent package (or its subclasses). Instances of these classes have their own concurrency control mechanisms that are orthogonal to the synchronization provided by the Java keyword synchronized. For example, synchronizing on an AtomicBoolean will not prevent other threads from modifying the AtomicBoolean.\n\nSuch code may be correct, but should be carefully reviewed and documented, and may confuse people who have to maintain the code at a later date.",
      "jml_jsr166_calling_wait_rather_than_await": "JLM: Using monitor style wait methods on util.concurrent abstraction\nThis method calls wait(), notify() or notifyAll() on an object that also provides an await(), signal(), signalAll() method (such as util.concurrent Condition objects). This probably isn't what you want, and even if you do want it, you should consider changing your design, as other developers will find it exceptionally confusing.",
      "jlm_jsr166_lock_monitorenter": "JLM: Synchronization performed on Lock\nThis method performs synchronization on an object that implements java.util.concurrent.locks.Lock. Such an object is locked/unlocked using acquire()/release() rather than using the synchronized (...) construct.",
      "swl_sleep_with_lock_held": "SWL: Method calls Thread.sleep() with a lock held\nThis method calls Thread.sleep() with a lock held. This may result in very poor performance and scalability, or a deadlock, since other threads may be waiting to acquire the lock. It is a much better idea to call wait() on the lock, which releases the lock and allows other threads to run.\n\nSee CWE-667: Improper Locking.<\\p>",
      "rv_return_value_of_putifabsent_ignored": "RV: Return value of putIfAbsent ignored, value passed to putIfAbsent reused\nThe putIfAbsent method is typically used to ensure that a single value is associated with a given key (the first value for which put if absent succeeds). If you ignore the return value and retain a reference to the value passed in, you run the risk of retaining a value that is not the one that is associated with the key in the map. If it matters which one you use and you use the one that isn't stored in the map, your program will behave incorrectly.\nSee CWE-252: Unchecked Return Value.<\\p>",
      "ssd_do_not_use_instance_lock_on_shared_static_data": "SSD: Instance level lock was used on a shared static data\nIf the lock or the synchronized method is not static, that modifies the static field, that could leave the shared static data unprotected against concurrent access. This could occur in two ways, if a synchronization method uses a non-static lock object, or a synchronized method is declared as non-static. Both ways are ineffective. Best solution is to use a private static final lock object to secure the shared static data.\n\nSee SEI CERT rule LCK06-J. Do not use an instance lock to protect shared static data and CWE-667: Improper Locking.",
      "at_nonatomic_64_bit_primitive": "AT: This write of this 64-bit primitive variable may not atomic\nThe long and the double are 64-bit primitive types, and depending on the Java Virtual Machine implementation assigning a value to them can be treated as two separate 32-bit writes, and as such it's not atomic. See JSL 17.7. Non-Atomic Treatment of double and long. See SEI CERT rule VNA05-J. Ensure atomicity when reading and writing 64-bit values and CWE-667: Improper Locking for more info. This bug can be ignored in platforms which guarantee that 64-bit long and double type read and write operations are atomic.\n\nTo fix it, declare the variable volatile, change the type of the field to the corresponding atomic type from java.lang.concurrent.atomic or correctly synchronize the code. Declaring the variable volatile may not be enough in some cases: e.g. when the variable is assigned a value which depends on the current value or on the result of nonatomic compound operations.",
      "at_stale_thread_write_of_primitive": "AT: This write of this shared primitive variable may not be visible to other threads\nSEI CERT rule VNA00-J describes that reading a shared primitive variable in one thread may not yield the value of the most recent write to the variable from another thread. Consequently, the thread may observe a stale value of the shared variable.\n\nTo fix it, declare the variable volatile, change the type of the field to the corresponding atomic type from java.lang.concurrent.atomic or correctly synchronize the code. Declaring the variable volatile may not be enough in some cases: e.g. when the variable is assigned a value which depends on the current value or on the result of nonatomic compound operations. This guarantees that 64-bit primitive long and double variables are accessed atomically.\n\nSee also CWE-413: Improper Resource Locking, CWE-567: Unsynchronized Access to Shared Data in a Multithreaded Context, and CWE-667: Improper Locking.",
      "at_nonatomic_operations_on_shared_variable": "AT: Operation on shared variable is not atomic\nThis write of a variable shared between functions depends on the current value of the variable (either because it's a compound operation - e.g. +=, ++ - or it simply depends on the current value), as such it consists of more than one discrete operation. These operations are not atomic in themselves and need further synchronization. See SEI CERT rule VNA02-J, CWE-366: Race Condition within a Thread, CWE-413: Improper Resource Locking, CWE-567: Unsynchronized Access to Shared Data in a Multithreaded Context, and CWE-667: Improper Locking.\n\nSimply declaring a variable volatile fails to guarantee the atomicity of compound operations on the variable, but synchronizing the writes on top of declaring the variable volatile for read operations is sufficient.\nTo solve this issue, synchronize compound operations and other write operations depending on the previous value, use read-write locks, or declare the shared variable with an atomic type.",
      "noise_null_dereference": "NOISE: Bogus warning about a null pointer dereference\nBogus warning.",
      "noise_method_call": "NOISE: Bogus warning about a method call\nBogus warning.",
      "noise_field_reference": "NOISE: Bogus warning about a field reference\nBogus warning.",
      "noise_operation": "NOISE: Bogus warning about an operation\nBogus warning.",
      "hsc_huge_shared_string_constant": "HSC: Huge string constants is duplicated across multiple class files\nA large String constant is duplicated across multiple class files. This is likely because a final field is initialized to a String constant, and the Java language mandates that all references to a final field from other classes be inlined into that classfile. See JDK bug 6447475 for a description of an occurrence of this bug in the JDK and how resolving it reduced the size of the JDK by 1 megabyte.",
      "dmi_blocking_methods_on_url": "Dm: The equals and hashCode methods of URL are blocking\nThe equals and hashCode method of URL perform domain name resolution, this can result in a big performance hit. See http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html for more information. Consider using java.net.URI instead.",
      "dmi_collection_of_urls": "Dm: Maps and sets of URLs can be performance hogs\nThis method or field is or uses a Map or Set of URLs. Since both the equals and hashCode method of URL perform domain name resolution, this can result in a big performance hit. See http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html for more information. Consider using java.net.URI instead.",
      "dm_string_ctor": "Dm: Method invokes inefficient new String(String) constructor\nUsing the java.lang.String(String) constructor wastes memory because the object so constructed will be functionally indistinguishable from the String passed as a parameter.  Just use the argument String directly.",
      "dm_string_void_ctor": "Dm: Method invokes inefficient new String() constructor\nCreating a new java.lang.String object using the no-argument constructor wastes memory because the object so created will be functionally indistinguishable from the empty string constant ''.  Java guarantees that identical string constants will be represented by the same String object.  Therefore, you should just use the empty string constant directly.",
      "dm_string_tostring": "Dm: Method invokes toString() method on a String\nCalling String.toString() is a redundant operation. Just use the String.",
      "dm_gc": "Dm: Explicit garbage collection; extremely dubious except in benchmarking code\nCode explicitly invokes garbage collection. Except for specific use in benchmarking, this is very dubious.\n\nIn the past, situations where people have explicitly invoked the garbage collector in routines such as close or finalize methods has led to huge performance black holes. Garbage collection can be expensive. Any situation that forces hundreds or thousands of garbage collections will bring the machine to a crawl.",
      "dm_boolean_ctor": "Dm: Method invokes inefficient Boolean constructor; use Boolean.valueOf(…) instead\nCreating new instances of java.lang.Boolean wastes memory, since Boolean objects are immutable and there are only two useful values of this type.  Use the Boolean.valueOf() method (or Java 5 autoboxing) to create Boolean objects instead.",
      "dm_number_ctor": "Bx: Method invokes inefficient Number constructor; use static valueOf instead\nUsing new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster.\n\nValues between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same.\n\nUnless the class must be compatible with JVMs predating Java 5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.",
      "dm_fp_number_ctor": "Bx: Method invokes inefficient floating-point Number constructor; use static valueOf instead\nUsing new Double(double) is guaranteed to always result in a new object whereas Double.valueOf(double) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster.\n\nUnless the class must be compatible with JVMs predating Java 5, use either autoboxing or the valueOf() method when creating instances of Double and Float.",
      "dm_boxed_primitive_tostring": "Bx: Method allocates a boxed primitive just to call toString\nA boxed primitive is allocated just to call toString(). It is more effective to just use the static form of toString which takes the primitive value. So,\n\nReplace...\tWith this...\nnew Integer(1).toString()\tInteger.toString(1)\nnew Long(1).toString()\tLong.toString(1)\nnew Float(1.0).toString()\tFloat.toString(1.0)\nnew Double(1.0).toString()\tDouble.toString(1.0)\nnew Byte(1).toString()\tByte.toString(1)\nnew Short(1).toString()\tShort.toString(1)\nnew Boolean(true).toString()\tBoolean.toS",
      "dm_boxed_primitive_for_parsing": "tring(true)\nBx: Boxing/unboxing to parse a primitive\nA boxed primitive is created from a String, just to extract the unboxed primitive value. It is more efficient to just call the static parseXXX method.",
      "dm_boxed_primitive_for_compare": "Bx: Boxing a primitive to compare\nA boxed primitive is created just to call compareTo() method. It's more efficient to use static compare method (for double and float since Java 1.4, for other primitive types since Java 7) which works on primitives directly.",
      "bx_unboxed_and_coerced_for_ternary_operator": "Bx: Primitive value is unboxed and coerced for ternary operator\nA wrapped primitive value is unboxed and converted to another primitive type as part of the evaluation of a conditional ternary operator (the b ? e1 : e2 operator). The semantics of Java mandate that if e1 and e2 are wrapped numeric values, the values are unboxed and converted/coerced to their common type (e.g, if e1 is of type Integer and e2 is of type Float, then e1 is unboxed, converted to a floating point value, and boxed. See JLS Section 15.25.",
      "bx_unboxing_immediately_reboxed": "Bx: Boxed value is unboxed and then immediately reboxed\nA boxed value is unboxed and then immediately reboxed.",
      "bx_boxing_immediately_unboxed": "Bx: Primitive value is boxed and then immediately unboxed\nA primitive is boxed, and then immediately unboxed. This probably is due to a manual boxing in a place where an unboxed value is required, thus forcing the compiler to immediately undo the work of the boxing.",
      "bx_boxing_immediately_unboxed_to_perform_coercion": "Bx: Primitive value is boxed then unboxed to perform primitive coercion\nA primitive boxed value constructed and then immediately converted into a different primitive type (e.g., new Double(d).intValue()). Just perform direct primitive coercion (e.g., (int) d).\n\nSee CWE-192: Integer Coercion Error.",
      "dm_new_for_getclass": "Dm: Method allocates an object, only to get the class object\nThis method allocates an object just to call getClass() on it, in order to retrieve the Class object for it. It is simpler to just access the .class property of the class.",
      "dm_nextint_via_nextdouble": "Dm: Use the nextInt method of Random rather than nextDouble to generate a random integer\nIf r is a java.util.Random, you can generate a random number from 0 to n-1 using r.nextInt(n), rather than using (int)(r.nextDouble() * n).\n\nThe argument to nextInt must be positive. If, for example, you want to generate a random value from -99 to 0, use -r.nextInt(100).",
      "ss_should_be_static": "SS: Unread field: should this field be static?\nThis class contains an instance final field that is initialized to a compile-time static value. Consider making the field static.",
      "uuf_unused_field": "UuF: Unused field\nThis field is never used.  Consider removing it from the class.\n\nSee CWE-563: Assignment to Variable without Use.",
      "urf_unread_field": "UrF: Unread field\nThis field is never read.  Consider removing it from the class.\n\nSee CWE-563: Assignment to Variable without Use.",
      "sic_inner_should_be_static": "SIC: Should be a static inner class\nThis class is an inner class, but does not use its embedded reference to the object which created it.  This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.  If possible, the class should be made static.",
      "sic_inner_should_be_static_needs_this": "SIC: Could be refactored into a static inner class\nThis class is an inner class, but does not use its embedded reference to the object which created it except during construction of the inner object.  This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.  If possible, the class should be made into a static inner class. Since the reference to the outer object is required during construction of the inner instance, the inner class will need to be refactored so as to pass a reference to the outer instance to the constructor for the inner class.",
      "sic_inner_should_be_static_anon": "SIC: Could be refactored into a named static inner class\nThis class is an inner class, but does not use its embedded reference to the object which created it.  This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.  If possible, the class should be made into a static inner class. Since anonymous inner classes cannot be marked as static, doing this will require refactoring the inner class so that it is a named inner class.",
      "upm_uncalled_private_method": "UPM: Private method is never called\nThis private method is never called. Although it is possible that the method will be invoked through reflection, it is more likely that the method is never used, and should be removed.\n\nSee CWE-561: Dead Code.",
      "sbsc_use_stringbuffer_concatenation": "SBSC: Method concatenates strings using + in a loop\nThe method seems to be building a String using concatenation in a loop. In each iteration, the String is converted to a StringBuffer/StringBuilder, appended to, and converted back to a String. This can lead to a cost quadratic in the number of iterations, as the growing string is recopied in each iteration.\n\nBetter performance can be obtained by using a StringBuffer (or StringBuilder in Java 5) explicitly.\n\nFor example:\n\n// This is bad\nString s = '';\nfor (int i = 0; i < field.length; ++i) {\n    s = s + field[i];\n}\n\n// This is better\nStringBuffer buf = new StringBuffer();\nfor (int i = 0; i < field.length; ++i) {\n    buf.append(field[i]);\n}\nString s = buf.toString();",
      "iil_elements_get_length_in_loop": "IIL: NodeList.getLength() called in a loop\nThe method calls NodeList.getLength() inside the loop and NodeList was produced by getElementsByTagName call. This NodeList doesn't store its length, but computes it every time in not very optimal way. Consider storing the length to the variable before the loop.",
      "iil_prepare_statement_in_loop": "IIL: Method calls prepareStatement in a loop\nThe method calls Connection.prepareStatement inside the loop passing the constant arguments. If the PreparedStatement should be executed several times there's no reason to recreate it for each loop iteration. Move this call outside the loop.",
      "iil_pattern_compile_in_loop": "IIL: Method calls Pattern.compile in a loop\nThe method calls Pattern.compile inside the loop passing the constant arguments. If the Pattern should be used several times there's no reason to compile it for each loop iteration. Move this call outside the loop or even into static final field.",
      "iil_pattern_compile_in_loop_indirect": "IIL: Method compiles the regular expression in a loop\nThe method creates the same regular expression inside the loop, so it will be compiled every iteration. It would be more optimal to precompile this regular expression using Pattern.compile outside the loop.",
      "iio_inefficient_index_of": "IIO: Inefficient use of String.indexOf(String)\nThis code passes a constant string of length 1 to String.indexOf(). It is more efficient to use the integer implementations of String.indexOf(). f. e. call myString.indexOf('.') instead of myString.indexOf('.')",
      "iio_inefficient_last_index_of": "IIO: Inefficient use of String.lastIndexOf(String)\nThis code passes a constant string of length 1 to String.lastIndexOf(). It is more efficient to use the integer implementations of String.lastIndexOf(). f. e. call myString.lastIndexOf('.') instead of myString.lastIndexOf('.')",
      "ita_inefficient_to_array": "ITA: Method uses toArray() with zero-length array argument\nThis method uses the toArray() method of a collection derived class, and passes in a zero-length prototype array argument. It is more efficient to use myCollection.toArray(new Foo[myCollection.size()]) If the array passed in is big enough to store all the elements of the collection, then it is populated and returned directly. This avoids the need to create a second array (by reflection) to return as the result.",
      "wmi_wrong_map_iterator": "WMI: Inefficient use of keySet iterator instead of entrySet iterator\nThis method accesses the value of a Map entry, using a key that was retrieved from a keySet iterator. It is more efficient to use an iterator on the entrySet of the map, to avoid the Map.get(key) lookup.",
      "um_unnecessary_math": "UM: Method calls static Math class method on a constant value\nThis method uses a static method from java.lang.Math on a constant value. This method's result in this case, can be determined statically, and is faster and sometimes more accurate to just use the constant. Methods detected are:\n\nMethod\tParameter\nabs\t-any-\nacos\t0.0 or 1.0\nasin\t0.0 or 1.0\natan\t0.0 or 1.0\natan2\t0.0\ncbrt\t0.0 or 1.0\nceil\t-any-\ncos\t0.0\ncosh\t0.0\nexp\t0.0 or 1.0\nexpm1\t0.0\nfloor\t-any-\nlog\t0.0 or 1.0\nlog10\t0.0 or 1.0\nrint\t-any-\nround\t-any-\nsin\t0.0\nsinh\t0.0\nsqrt\t0.0 or 1.0\ntan\t0.0\ntanh\t0.0\ntoDegrees\t0.0 or 1.0\ntoRadians\t0.0",
      "ima_inefficient_member_access": "IMA: Method accesses a private member variable of owning class\nThis method of an inner class reads from or writes to a private member variable of the owning class, or calls a private method of the owning class. The compiler must generate a special method to access this private member, causing this to be less efficient. Relaxing the protection of the member variable or method will allow the compiler to treat this as a normal access.",
      "xss_request_parameter_to_send_error": "XSS: Servlet reflected cross site scripting vulnerability in error page\nThis code directly writes an HTTP parameter to a Server error page (using HttpServletResponse.sendError). Echoing this untrusted input allows for a reflected cross site scripting vulnerability. See http://en.wikipedia.org/wiki/Cross-site_scripting for more information.\n\nSpotBugs looks only for the most blatant, obvious cases of cross site scripting. If SpotBugs found any, you almost certainly have more cross site scripting vulnerabilities that SpotBugs doesn't report. If you are concerned about cross site scripting, you should seriously consider using a commercial static analysis or pen-testing tool.\n\nSee CWE-81: Improper Neutralization of Script in an Error Message Web Page and CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting').",
      "xss_request_parameter_to_servlet_writer": "XSS: Servlet reflected cross site scripting vulnerability\nThis code directly writes an HTTP parameter to Servlet output, which allows for a reflected cross site scripting vulnerability. See http://en.wikipedia.org/wiki/Cross-site_scripting for more information.\n\nSpotBugs looks only for the most blatant, obvious cases of cross site scripting. If SpotBugs found any, you almost certainly have more cross site scripting vulnerabilities that SpotBugs doesn't report. If you are concerned about cross site scripting, you should seriously consider using a commercial static analysis or pen-testing tool.\n\nSee CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting').",
      "xss_request_parameter_to_jsp_writer": "XSS: JSP reflected cross site scripting vulnerability\nThis code directly writes an HTTP parameter to JSP output, which allows for a cross site scripting vulnerability. See http://en.wikipedia.org/wiki/Cross-site_scripting for more information.\n\nSpotBugs looks only for the most blatant, obvious cases of cross site scripting. If SpotBugs found any, you almost certainly have more cross site scripting vulnerabilities that SpotBugs doesn't report. If you are concerned about cross site scripting, you should seriously consider using a commercial static analysis or pen-testing tool.\n\nSee CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting').",
      "hrs_request_parameter_to_http_header": "HRS: HTTP Response splitting vulnerability\nThis code directly writes an HTTP parameter to an HTTP header, which allows for an HTTP response splitting vulnerability. See http://en.wikipedia.org/wiki/HTTP_response_splitting for more information.\n\nSpotBugs looks only for the most blatant, obvious cases of HTTP response splitting. If SpotBugs found any, you almost certainly have more vulnerabilities that SpotBugs doesn't report. If you are concerned about HTTP response splitting, you should seriously consider using a commercial static analysis or pen-testing tool.\n\nSee CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting').",
      "hrs_request_parameter_to_cookie": "HRS: HTTP cookie formed from untrusted input\nThis code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added to an HTTP response, it will allow an HTTP response splitting vulnerability. See http://en.wikipedia.org/wiki/HTTP_response_splitting for more information.\n\nSpotBugs looks only for the most blatant, obvious cases of HTTP response splitting. If SpotBugs found any, you almost certainly have more vulnerabilities that SpotBugs doesn't report. If you are concerned about HTTP response splitting, you should seriously consider using a commercial static analysis or pen-testing tool.\n\nSee CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting').",
      "pt_absolute_path_traversal": "PT: Absolute path traversal in servlet\nThe software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as '/abs/path' that can resolve to a location that is outside of that directory. See http://cwe.mitre.org/data/definitions/36.html for more information.\n\nSpotBugs looks only for the most blatant, obvious cases of absolute path traversal. If SpotBugs found any, you almost certainly have more vulnerabilities that SpotBugs doesn't report. If you are concerned about absolute path traversal, you should seriously consider using a commercial static analysis or pen-testing tool.\n\nSee CWE-36: Absolute Path Traversal.",
      "pt_relative_path_traversal": "PT: Relative path traversal in servlet\nThe software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as '..' that can resolve to a location that is outside of that directory. See http://cwe.mitre.org/data/definitions/23.html for more information.\n\nSpotBugs looks only for the most blatant, obvious cases of relative path traversal. If SpotBugs found any, you almost certainly have more vulnerabilities that SpotBugs doesn't report. If you are concerned about relative path traversal, you should seriously consider using a commercial static analysis or pen-testing tool.\n\nSee CWE-23: Relative Path Traversal.",
      "dmi_constant_db_password": "Dm: Hardcoded constant database password\nThis code creates a database connect using a hardcoded, constant password. Anyone with access to either the source code or the compiled code can easily learn the password.\n\nSee CWE-259: Use of Hard-coded Password.",
      "dmi_empty_db_password": "Dm: Empty database password\nThis code creates a database connect using a blank or empty password. This indicates that the database is not protected by a password.\n\nSee CWE-259: Use of Hard-coded Password.",
      "sql_nonconstant_string_passed_to_execute": "SQL: Nonconstant string passed to execute or addBatch method on an SQL statement\nThe method invokes the execute or addBatch method on an SQL statement with a String that seems to be dynamically generated. Consider using a prepared statement instead. It is more efficient and less vulnerable to SQL injection attacks.\n\nSee CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection').",
      "sql_prepared_statement_generated_from_nonconstant_string": "SQL: A prepared statement is generated from a nonconstant String\nThe code creates an SQL prepared statement from a nonconstant String. If unchecked, tainted data from a user is used in building this String, SQL injection could be used to make the prepared statement do something unexpected and undesirable.\n\nSee CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection').",
      "ase_assertion_with_side_effect": "ASE: Expression in assertion may produce a side effect\nExpressions used in assertions must not produce side effects.\n\nSee SEI CERT Rule EXP06 for more information.",
      "ase_assertion_with_side_effect_method": "ASE: Method invoked in assertion may produce a side effect\nExpressions used in assertions must not produce side effects.\n\nSee SEI CERT Rule EXP06 for more information.",
      "caa_covariant_array_field": "CAA: Covariant array assignment to a field\nArray of covariant type is assigned to a field. This is confusing and may lead to ArrayStoreException at runtime if the reference of some other type will be stored in this array later like in the following code:\n\nNumber[] arr = new Integer[10];\narr[0] = 1.0;\nConsider changing the type of created array or the field type.",
      "caa_covariant_array_return": "CAA: Covariant array is returned from the method\nArray of covariant type is returned from the method. This is confusing and may lead to ArrayStoreException at runtime if the calling code will try to store the reference of some other type in the returned array.\n\nConsider changing the type of created array or the method return type.",
      "caa_covariant_array_local": "CAA: Covariant array assignment to a local variable\nArray of covariant type is assigned to a local variable. This is confusing and may lead to ArrayStoreException at runtime if the reference of some other type will be stored in this array later like in the following code:\n\nNumber[] arr = new Integer[10];\narr[0] = 1.0;\nConsider changing the type of created array or the local variable type.",
      "dmi_unsupported_method": "Dm: Call to unsupported method\nAll targets of this method invocation throw an UnsupportedOperationException.",
      "dmi_thread_passed_where_runnable_expected": "Dm: Thread passed where Runnable expected\nA Thread object is passed as a parameter to a method where a Runnable is expected. This is rather unusual, and may indicate a logic error or cause unexpected behavior.",
      "np_dereference_of_readline_value": "NP: Dereference of the result of readLine() without nullcheck\nThe result of invoking readLine() is dereferenced without checking to see if the result is null. If there are no more lines of text to read, readLine() will return null and dereferencing that will generate a null pointer exception.",
      "np_immediate_dereference_of_readline": "NP: Immediate dereference of the result of readLine()\nThe result of invoking readLine() is immediately dereferenced. If there are no more lines of text to read, readLine() will return null and dereferencing that will generate a null pointer exception.",
      "rv_rem_of_random_int": "RV: Remainder of 32-bit signed random integer\nThis code generates a random signed integer and then computes the absolute value of that random integer. If the number returned by the random number generator is Integer.MIN_VALUE, then the result will be negative as well (since Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE). (Same problem arises for long values as well).",
      "rv_rem_of_hashcode": "RV: Remainder of hashCode could be negative\nThis code computes a hashCode, and then computes the remainder of that value modulo another value. Since the hashCode can be negative, the result of the remainder operation can also be negative.\n\nAssuming you want to ensure that the result of your computation is nonnegative, you may need to change your code. If you know the divisor is a power of 2, you can use a bitwise and operator instead (i.e., instead of using x.hashCode()%n, use x.hashCode()&(n-1)). This is probably faster than computing the remainder as well. If you don't know that the divisor is a power of 2, take the absolute value of the result of the remainder operation (i.e., use Math.abs(x.hashCode()%n)).",
      "eq_unusual": "Eq: Unusual equals method\nThis class doesn't do any of the patterns we recognize for checking that the type of the argument is compatible with the type of the this object. There might not be anything wrong with this code, but it is worth reviewing.",
      "eq_doesnt_override_equals": "Eq: Class doesn't override equals in superclass\nThis class extends a class that defines an equals method and adds fields, but doesn't define an equals method itself. Thus, equality on instances of this class will ignore the identity of the subclass and the added fields. Be sure this is what is intended, and that you don't need to override the equals method. Even if you don't need to override the equals method, consider overriding it anyway to document the fact that the equals method for the subclass just return the result of invoking super.equals(o).",
      "ns_non_short_circuit": "NS: Questionable use of non-short-circuit logic\nThis code seems to be using non-short-circuit logic (e.g., & or |) rather than short-circuit logic (&& or ||). Non-short-circuit logic causes both sides of the expression to be evaluated even when the result can be inferred from knowing the left-hand side. This can be less efficient and can result in errors if the left-hand side guards cases when evaluating the right-hand side can generate an error.\n\nSee the Java Language Specification for details.",
      "ns_dangerous_non_short_circuit": "NS: Potentially dangerous use of non-short-circuit logic\nThis code seems to be using non-short-circuit logic (e.g., & or |) rather than short-circuit logic (&& or ||). In addition, it seems possible that, depending on the value of the left hand side, you might not want to evaluate the right hand side (because it would have side effects, could cause an exception or could be expensive.\n\nNon-short-circuit logic causes both sides of the expression to be evaluated even when the result can be inferred from knowing the left-hand side. This can be less efficient and can result in errors if the left-hand side guards cases when evaluating the right-hand side can generate an error.\n\nSee the Java Language Specification for details.",
      "ic_init_circularity": "IC: Initialization circularity\nA circularity was detected in the static initializers of the two classes referenced by the bug instance.  Many kinds of unexpected behavior may arise from such circularity.",
      "ia_ambiguous_invocation_of_inherited_or_outer_method": "IA: Potentially ambiguous invocation of either an inherited or outer method\nAn inner class is invoking a method that could be resolved to either an inherited method or a method defined in an outer class. For example, you invoke foo(17), which is defined in both a superclass and in an outer method. By the Java semantics, it will be resolved to invoke the inherited method, but this may not be what you intend.\n\nIf you really intend to invoke the inherited method, invoke it by invoking the method on super (e.g., invoke super.foo(17)), and thus it will be clear to other readers of your code and to SpotBugs that you want to invoke the inherited method, not the method in the outer class.\n\nIf you call this.foo(17), then the inherited method will be invoked. However, since SpotBugs only looks at classfiles, it cannot tell the difference between an invocation of this.foo(17) and foo(17), it will still complain about a potential ambiguous invocation.",
      "se_private_read_resolve_not_inherited": "Se: Private readResolve method not inherited by subclasses\nThis class defines a private readResolve method. Since it is private, it won't be inherited by subclasses. This might be intentional and OK, but should be reviewed to ensure it is what is intended.",
      "se_transient_field_of_nonserializable_class": "Se: Transient field of class that isn't Serializable.\nThe field is marked as transient, but the class isn't Serializable, so marking it as transient has absolutely no effect. This may be leftover marking from a previous version of the code in which the class was Serializable, or it may indicate a misunderstanding of how serialization works.\n\nThis bug is reported only if special option reportTransientFieldOfNonSerializableClass is set.\n\nSee CWE-1066: Missing Serialization Control Element.",
      "sf_switch_fallthrough": "SF: Switch statement found where one case falls through to the next case\nThis method contains a switch statement where one case branch will fall through to the next case. Usually you need to end this case with a break or return.\n\nSee CWE-484: Omitted Break Statement in Switch.",
      "sf_switch_no_default": "SF: Switch statement found where default case is missing\nThis method contains a switch statement where default case is missing. Usually you need to provide a default case.\n\nBecause the analysis only looks at the generated bytecode, this warning can be incorrect triggered if the default case is at the end of the switch statement and the switch statement doesn't contain break statements for other cases.<\\p>\n\nSee CWE-478: Missing Default Case in Multiple Condition Expression.",
      "uuf_unused_public_or_protected_field": "UuF: Unused public or protected field\nThis field is never used.  The field is public or protected, so perhaps it is intended to be used with classes not seen as part of the analysis. If not, consider removing it from the class.\n\nSee CWE-563: Assignment to Variable without Use.",
      "urf_unread_public_or_protected_field": "UrF: Unread public/protected field\nThis field is never read.  The field is public or protected, so perhaps it is intended to be used with classes not seen as part of the analysis. If not, consider removing it from the class.\n\nSee CWE-563: Assignment to Variable without Use.",
      "qf_questionable_for_loop": "QF: Complicated, subtle or wrong increment in for-loop\nAre you sure this for loop is incrementing/decrementing the correct variable? It appears that another variable is being initialized and checked by the for loop.",
      "np_unwritten_public_or_protected_field": "NP: Read of unwritten public or protected field\nThe program is dereferencing a public or protected field that does not seem to ever have a non-null value written to it. Unless the field is initialized via some mechanism not seen by the analysis, dereferencing this value will generate a null pointer exception.\n\nSee CWE-457: Use of Uninitialized Variable.",
      "uwf_field_not_initialized_in_constructor": "UwF: Field not initialized in constructor but dereferenced without null check\nThis field is never initialized within any constructor, and is therefore could be null after the object is constructed. Elsewhere, it is loaded and dereferenced without a null check. This could be either an error or a questionable design, since it means a null pointer exception will be generated if that field is dereferenced before being initialized.\n\nSee CWE-457: Use of Uninitialized Variable.",
      "uwf_unwritten_public_or_protected_field": "UwF: Unwritten public or protected field\nNo writes were seen to this public/protected field.  All reads of it will return the default value. Check for errors (should it have been initialized?), or remove it if it is useless.\n\nSee CWE-457: Use of Uninitialized Variable.",
      "uc_useless_void_method": "UC: Useless non-empty void method\nOur analysis shows that this non-empty void method does not actually perform any useful work. Please check it: probably there's a mistake in its code or its body can be fully removed.\n\nWe are trying to reduce the false positives as much as possible, but in some cases this warning might be wrong. Common false-positive cases include:\n\nThe method is intended to trigger loading of some class which may have a side effect.\nThe method is intended to im",
      "uc_useless_condition": "plicitly throw some obscure exception.\nUC: Condition has no effect\nThis condition always produces the same result as the value of the involved variable that was narrowed before. Probably something else was meant or the condition can be removed.\n\nSee CWE-570: Expression is Always False and CWE-571: Expression is Always True.",
      "uc_useless_condition_type": "UC: Condition has no effect due to the variable type\nThis condition always produces the same result due to the type range of the involved variable. Probably something else was meant or the condition can be removed.\n\nSee CWE-570: Expression is Always False and CWE-571: Expression is Always True.",
      "uc_useless_object": "UC: Useless object created\nOur analysis shows that this object is useless. It's created and modified, but its value never goes outside the method or produces any side effect. Either there is a mistake and object was intended to be used, or it can be removed.\n\nThis analysis rarely produces false-positives. Common false-positive cases include:\n\n- This object used to implicitly throw some obscure exception.\n\n- This object used as a stub to generalize the code.\n\n- This object used to hold strong references to weak/soft-referenced objects.",
      "uc_useless_object_stack": "UC: Useless object created on stack\nThis object is created just to perform some modifications which don't have any side effect. Probably something else was meant or the object can be removed.",
      "rv_return_value_ignored_inferred": "RV: Method ignores return value, is this OK?\nThis code calls a method and ignores the return value. The return value is the same type as the type the method is invoked on, and from our analysis it looks like the return value might be important (e.g., like ignoring the return value of String.toLowerCase()).\n\nWe are guessing that ignoring the return value might be a bad idea just from a simple analysis of the body of the method. You can use a @CheckReturnValue annotation to instruct SpotBugs that ignoring the return value of this method is acceptable.\n\nPlease investigate this closely to decide whether it is OK to ignore the return value.",
      "rv_return_value_ignored_no_side_effect": "RV: Return value of method without side effect is ignored\nThis code calls a method and ignores the return value. However, our analysis shows that the method (including its implementations in subclasses if any) does not produce any effect other than return value. Thus, this call can be removed.\n\nWe are trying to reduce the false positives as much as possible, but in some cases this warning might be wrong. Common false-positive cases include:\n\n- The method is designed to be overridden and produce a side effect in other projects which are out of the scope of the analysis.\n\n- The method is called to trigger the class loading which may have a side effect.\n\n- The method is called just to get some exception.\n\nIf you feel that our assumption is incorrect, you can use a @CheckReturnValue annotation to instruct SpotBugs that ignoring the return value of this method is acceptable.",
      "rv_check_for_positive_indexof": "RV: Method checks to see if result of String.indexOf is positive\nThe method invokes String.indexOf and checks to see if the result is positive or non-positive. It is much more typical to check to see if the result is negative or non-negative. It is positive only if the substring checked for occurs at some place other than at the beginning of the String.",
      "rv_dont_just_null_check_readline": "RV: Method discards result of readLine after checking if it is non-null\nThe value returned by readLine is discarded after checking to see if the return value is non-null. In almost all situations, if the result is non-null, you will want to use that non-null value. Calling readLine again will give you a different line.",
      "np_parameter_must_be_nonnull_but_marked_as_nullable": "NP: Parameter must be non-null but is marked as nullable\nThis parameter is always used in a way that requires it to be non-null, but the parameter is explicitly annotated as being Nullable. Either the use of the parameter or the annotation is wrong.",
      "np_null_on_some_path_from_return_value": "NP: Possible null pointer dereference due to return value of called method\nThe return value from a method is dereferenced without a null check, and the return value of that method is one that should generally be checked for null. This may lead to a NullPointerException when the code is executed.",
      "np_null_on_some_path_might_be_infeasible": "NP: Possible null pointer dereference on branch that might be infeasible\nThere is a branch of statement that, if executed, guarantees that a null value will be dereferenced, which would generate a NullPointerException when the code is executed. Of course, the problem might be that the branch or statement is infeasible and that the null pointer exception cannot ever be executed; deciding that is beyond the ability of SpotBugs. Due to the fact that this value had been previously tested for nullness, this is a definite possibility.",
      "np_load_of_known_null_value": "NP: Load of known null value\nThe variable referenced at this point is known to be null due to an earlier check against null. Although this is valid, it might be a mistake (perhaps you intended to refer to a different variable, or perhaps the earlier check to see if the variable is null should have been a check to see if it was non-null).",
      "pzla_prefer_zero_length_arrays": "PZLA: Consider returning a zero length array rather than null\nIt is often a better design to return a length zero array rather than a null reference to indicate that there are no results (i.e., an empty list of results). This way, no explicit check for null is needed by clients of the method.\n\nOn the other hand, using null to indicate 'there is no answer to this question' is probably appropriate. For example, File.listFiles() returns an empty list if given a directory containing no files, and returns null if the file is not a directory.",
      "ucf_useless_control_flow": "UCF: Useless control flow\nThis method contains a useless control flow statement, where control flow continues onto the same place regardless of whether or not the branch is taken. For example, this is caused by having an empty statement block for an if statement:\n\nif (argv.length == 0) {\n    // TODO: handle this case\n}",
      "ucf_useless_control_flow_next_line": "UCF: Useless control flow to next line\nThis method contains a useless control flow statement in which control flow follows to the same or following line regardless of whether or not the branch is taken. Often, this is caused by inadvertently using an empty statement as the body of an if statement, e.g.:\n\nif (argv.length == 1);\n    System.out.println('Hello, ' + argv[0]);\n\n\n\n\n    ",
      "rcn_redundant_nullcheck_of_null_value": "\nRCN: Redundant nullcheck of value known to be null\nThis method contains a redundant check of a known null value against the constant null.",
      "rcn_redundant_nullcheck_of_nonnull_value": "RCN: Redundant nullcheck of value known to be non-null\nThis method contains a redundant check of a known non-null value against the constant null.",
      "rcn_redundant_comparison_two_null_values": "RCN: Redundant comparison of two null values\nThis method contains a redundant comparison of two references known to both be definitely null.",
      "rcn_redundant_comparison_of_null_and_nonnull_value": "RCN: Redundant comparison of non-null value to null\nThis method contains a reference known to be non-null with another reference known to be null.",
      "sa_local_self_assignment": "SA: Self assignment of local variable\nThis method contains a self assignment of a local variable; e.g.\n\npublic void foo() {\n    int x = 3;\n    x = x;\n}\nSuch assignments are useless, and may indicate a logic error or typo.",
      "int_bad_rem_by_1": "INT: Integer remainder modulo 1\nAny expression (exp % 1) is guaranteed to always return zero. Did you mean (exp & 1) or (exp % 2) instead?",
      "int_vacuous_comparison": "INT: Vacuous comparison of integer value\nThere is an integer comparison that always returns the same value (e.g., x <= Integer.MAX_VALUE).",
      "int_vacuous_bit_operation": "INT: Vacuous bit mask operation on integer value\nThis is an integer bit operation (and, or, or exclusive or) that doesn't do any useful work (e.g., v & 0xffffffff).",
      "sa_local_double_assignment": "SA: Double assignment of local variable\nThis method contains a double assignment of a local variable; e.g.\n\npublic void foo() {\n    int x,y;\n    x = x = 17;\n}\nAssigning the same value to a variable twice is useless, and may indicate a logic error or typo.",
      "sa_field_double_assignment": "SA: Double assignment of field\nThis method contains a double assignment of a field; e.g.\n\nint x,y;\npublic void foo() {\n    x = x = 17;\n}\nAssigning to a field twice is useless, and may indicate a logic error or typo.",
      "dls_dead_local_store_in_return": "DLS: Useless assignment in return statement\nThis statement assigns to a local variable in a return statement. This assignment has no effect. Please verify that this statement does the right thing.\n\nSee CWE-563: Assignment to Variable without Use.",
      "dls_dead_local_store": "DLS: Dead store to local variable\nThis instruction assigns a value to a local variable, but the value is not read or used in any subsequent instruction. Often, this indicates an error, because the value computed is never used.\n\nNote that Sun's javac compiler often generates dead stores for final local variables. Because SpotBugs is a bytecode-based tool, there is no easy way to eliminate these false positives.\n\nSee CWE-563: Assignment to Variable without Use.",
      "dls_dead_local_store_shadows_field": "DLS: Dead store to local variable that shadows field\nThis instruction assigns a value to a local variable, but the value is not read or used in any subsequent instruction. Often, this indicates an error, because the value computed is never used. There is a field with the same name as the local variable. Did you mean to assign to that variable instead?\n\nSee CWE-563: Assignment to Variable without Use.",
      "dls_dead_local_store_of_null": "DLS: Dead store of null to local variable\nThe code stores null into a local variable, and the stored value is not read. This store may have been introduced to assist the garbage collector, but as of Java SE 6.0, this is no longer needed or useful.\n\nSee CWE-563: Assignment to Variable without Use.",
      "rec_catch_exception": "REC: Exception is caught when Exception is not thrown\nThis method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs.\n\nA better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:\n\ntry {\n    ...\n} catch (RuntimeException e) {\n    throw e;\n} catch (Exception e) {\n    ... deal with all non-runtime exceptions ...\n}\nSee CWE-396: Declaration of Catch for Generic Exception.",
      "dcn_nullpointer_exception": "DCN: NullPointerException caught\nAccording to SEI Cert rule ERR08-J NullPointerException should not be caught. Handling NullPointerException is considered an inferior alternative to null-checking.\n\nThis non-compliant code catches a NullPointerException to see if an incoming parameter is null:\n\n\nboolean hasSpace(String m) {\n  try {\n    String ms[] = m.split(' ');\n    return names.length != 1;\n  } catch (NullPointerException e) {\n    return false;\n  }\n}\nA compliant solution would use a null-check as in the following example:\n\n\nboolean hasSpace(String m) {\n    if (m == null) return false;\n    String ms[] = m.split(' ');\n    return names.length != 1;\n}\nSee CWE-395: Use of NullPointerException Catch to Detect NULL Pointer Dereference.",
      "fe_floating_point_equality": "FE: Test for floating point equality\nThis operation compares two floating point values for equality. Because floating point calculations may involve rounding, calculated float and double values may not be accurate. For values that must be precise, such as monetary values, consider using a fixed-precision type such as BigDecimal. For values that need not be precise, consider comparing for equality within some range, for example: if ( Math.abs(x - y) < .0000001 ). See the Java Language Specification, section 4.2.4.",
      "cd_circular_dependency": "CD: Test for circular dependencies among classes\nThis class has a circular dependency with other classes. This makes building these classes difficult, as each is dependent on the other to build correctly. Consider using interfaces to break the hard dependency.",
      "ri_redundant_interfaces": "RI: Class implements same interface as superclass\nThis class declares that it implements an interface that is also implemented by a superclass. This is redundant because once a superclass implements an interface, all subclasses by default also implement this interface. It may point out that the inheritance hierarchy has changed since this class was created, and consideration should be given to the ownership of the interface's implementation.",
      "mtia_suspect_struts_instance_field": "MTIA: Class extends Struts Action class and uses instance variables\nThis class extends from a Struts Action class, and uses an instance member variable. Since only one instance of a struts Action class is created by the Struts framework, and used in a multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider only using method local variables. Only instance fields that are written outside a monitor are reported.",
      "mtia_suspect_servlet_instance_field": "MTIA: Class extends Servlet class and uses instance variables\nThis class extends from a Servlet class, and uses an instance member variable. Since only one instance of a Servlet class is created by the J2EE framework, and used in a multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider only using method local variables.",
      "ps_public_semaphores": "PS: Class exposes synchronization and semaphores in its public interface\nThis class uses synchronization along with wait(), notify() or notifyAll() on itself (the this reference). Client classes that use this class, may, in addition, use an instance of this class as a synchronizing object. Because two classes are using the same object for synchronization, Multithread correctness is suspect. You should not synchronize nor call semaphore methods on a public reference. Consider using an internal private member variable to control synchronization.",
      "icast_integer_multiply_cast_to_long": "ICAST: Result of integer multiplication cast to long\nThis code performs integer multiply and then converts the result to a long, as in:\n\nlong convertDaysToMilliseconds(int days) { return 1000*3600*24*days; }\nIf the multiplication is done using long arithmetic, you can avoid the possibility that the result will overflow. For example, you could fix the above code to:\n\nlong convertDaysToMilliseconds(int days) { return 1000L*3600*24*days; }\nor\n\nstatic final long MILLISECONDS_PER_DAY = 24L*3600*1000;\nlong convertDaysToMilliseconds(int days) { return days * MILLISECONDS_PER_DAY; }\nSee CWE-192: Integer Coercion Error.",
      "icast_idiv_cast_to_double": "ICAST: Integral division result cast to double or float\nThis code casts the result of an integral division (e.g., int or long division) operation to double or float. Doing division on integers truncates the result to the integer value closest to zero. The fact that the result was cast to double suggests that this precision should have been retained. What was probably meant was to cast one or both of the operands to double before performing the division. Here is an example:\n\nint x = 2;\nint y = 5;\n// Wrong: yields result 0.0\ndouble value1 = x / y;\n\n// Right: yields result 0.4\ndouble value2 = x / (double) y;\nSee CWE-192: Integer Coercion Error.",
      "bc_bad_cast_to_concrete_collection": "BC: Questionable cast to concrete collection\nThis code casts an abstract collection (such as a Collection, List, or Set) to a specific concrete implementation (such as an ArrayList or HashSet). This might not be correct, and it may make your code fragile, since it makes it harder to switch to other concrete implementations at a future point. Unless you have a particular reason to do so, just use the abstract collection class.",
      "bc_unconfirmed_cast": "BC: Unchecked/unconfirmed cast\nThis cast is unchecked, and not all instances of the type cast from can be cast to the type it is being cast to. Check that your program logic ensures that this cast will not fail.",
      "bc_unconfirmed_cast_of_return_value": "BC: Unchecked/unconfirmed cast of return value from method\nThis code performs an unchecked cast of the return value of a method. The code might be calling the method in such a way that the cast is guaranteed to be safe, but SpotBugs is unable to verify that the cast is safe. Check that your program logic ensures that this cast will not fail.",
      "bc_vacuous_instanceof": "BC: instanceof will always return true\nThis instanceof test will always return true (unless the value being tested is null). Although this is safe, make sure it isn't an indication of some misunderstanding or some other logic error. If you really want to test the value for being null, perhaps it would be clearer to do better to do a null test rather than an instanceof test.\n\nSee CWE-571: Expression is Always True.",
      "bc_bad_cast_to_abstract_collection": "BC: Questionable cast to abstract collection\nThis code casts a Collection to an abstract collection (such as List, Set, or Map). Ensure that you are guaranteed that the object is of the type you are casting to. If all you need is to be able to iterate through a collection, you don't need to cast it to a Set or List.\n\nSee CWE-704: Incorrect Type Conversion or Cast.",
      "im_bad_check_for_odd": "IM: Check for oddness that won't work for negative numbers\nThe code uses x % 2 == 1 to check to see if a value is odd, but this won't work for negative numbers (e.g., (-5) % 2 == -1). If this code is intending to check for oddness, consider using (x & 1) == 1, or x % 2 != 0.",
      "im_average_computation_could_overflow": "IM: Computation of average could overflow\nThe code computes the average of two integers using either division or signed right shift, and then uses the result as the index of an array. If the values being averaged are very large, this can overflow (resulting in the computation of a negative average). Assuming that the result is intended to be nonnegative, you can use an unsigned right shift instead. In other words, rather that using (low+high)/2, use (low+high) >>> 1\n\nThis bug exists in many earlier implementations of binary search and merge sort. Martin Buchholz found and fixed it in the JDK libraries, and Joshua Bloch widely publicized the bug pattern.",
      "icast_questionable_unsigned_right_shift": "BSHIFT: Unsigned right shift cast to short/byte\nThe code performs an unsigned right shift, whose result is then cast to a short or byte, which discards the upper bits of the result. Since the upper bits are discarded, there may be no difference between a signed and unsigned right shift (depending upon the size of the shift).\n\nSee CWE-192: Integer Coercion Error.",
      "dmi_hardcoded_absolute_filename": "DMI: Code contains a hard coded reference to an absolute pathname\nThis code constructs a File object using a hard coded to an absolute pathname (e.g., new File('/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment');",
      "dmi_useless_substring": "DMI: Invocation of substring(0), which returns the original value\nThis code invokes substring(0) on a String, which returns the original value.",
      "st_write_to_static_from_instance_method": "ST: Write to static field from instance method\nThis instance method writes to a static field. This is tricky to get correct if multiple instances are being manipulated, and generally bad practice.",
      "dmi_nonserializable_object_written": "DMI: Non-serializable object written to ObjectOutput\nThis code seems to be passing a non-serializable object to the ObjectOutput.writeObject method. If the object is, indeed, non-serializable, an error will result.",
      "db_duplicate_branches": "DB: Method uses the same code for two branches\nThis method uses the same code to implement two branches of a conditional branch. Check to ensure that this isn't a coding mistake.\n\nSee CWE-1041: Use of Redundant Code.<\\p>",
      "db_duplicate_switch_clauses": "DB: Method uses the same code for two switch clauses\nThis method uses the same code to implement two clauses of a switch statement. This could be a case of duplicate code, but it might also indicate a coding mistake.\n\nSee CWE-1041: Use of Redundant Code.<\\p>",
      "xfb_xml_factory_bypass": "XFB: Method directly allocates a specific implementation of xml interfaces\nThis method allocates a specific implementation of an xml interface. It is preferable to use the supplied factory classes to create these objects so that the implementation can be changed at runtime. See\n\njavax.xml.parsers.DocumentBuilderFactory\njavax.xml.parsers.SAXParserFactory\njavax.xml.transform.TransformerFactory\norg.w3c.dom.Document.createXXXX\nfor details.",
      "usm_useless_subclass_method": "USM: Method superfluously delegates to parent class method\nThis derived method merely calls the same superclass method passing in the exact parameters received. This method can be removed, as it provides no additional value.",
      "usm_useless_abstract_method": "USM: Abstract Method is already defined in implemented interface\nThis abstract method is already defined in an interface that is implemented by this abstract class. This method can be removed, as it provides no additional value.",
      "ci_confused_inheritance": "CI: Class is final but declares protected field\nThis class is declared to be final, but declares fields to be protected. Since the class is final, it cannot be derived from, and the use of protected is confusing. The access modifier for the field should be changed to private or public to represent the true use for the field.",
      "tq_explicit_unknown_source_value_reaches_never_sink": "TQ: Value required to not have type qualifier, but marked as unknown\nA value is used in a way that requires it to be never be a value denoted by a type qualifier, but there is an explicit annotation stating that it is not known where the value is prohibited from having that type qualifier. Either the usage or the annotation is incorrect.",
      "tq_explicit_unknown_source_value_reaches_always_sink": "TQ: Value required to have type qualifier, but marked as unknown\nA value is used in a way that requires it to be always be a value denoted by a type qualifier, but there is an explicit annotation stating that it is not known where the value is required to have that type qualifier. Either the usage or the annotation is incorrect.",
      "np_method_return_relaxing_annotation": "NP: Method relaxes nullness annotation on return value\nA method should always implement the contract of a method it overrides. Thus, if a method takes is annotated as returning a @Nonnull value, you shouldn't override that method in a subclass with a method annotated as returning a @Nullable or @CheckForNull value. Doing so violates the contract that the method shouldn't return null.",
      "np_method_parameter_tightens_annotation": "NP: Method tightens nullness annotation on parameter\nA method should always implement the contract of a method it overrides. Thus, if a method takes a parameter that is marked as @Nullable, you shouldn't override that method in a subclass with a method where that parameter is @Nonnull. Doing so violates the contract that the method should handle a null parameter.",
      "us_useless_suppression_on_field": "US: Useless suppression on a field\nSuppressing annotations &SuppressFBWarnings should be removed from the source code as soon as they are no more needed. Leaving them may result in accidental warnings suppression. The annotation was probably added to suppress a warning raised by SpotBugs, but now SpotBugs does not report the bug anymore. Either the bug was solved or SpotBugs was updated, and the bug is no longer raised by that code.",
      "us_useless_suppression_on_class": "US: Useless suppression on a class\nSuppressing annotations &SuppressFBWarnings should be removed from the source code as soon as they are no more needed. Leaving them may result in accidental warnings suppression.",
      "us_useless_suppression_on_method": "US: Useless suppression on a method\nSuppressing annotations &SuppressFBWarnings should be removed from the source code as soon as they are no more needed. Leaving them may result in accidental warnings suppression. The annotation was probably added to suppress a warning raised by SpotBugs, but now SpotBugs does not report the bug anymore. Either the bug was solved or SpotBugs was updated, and the bug is no longer raised by that code.",
      "us_useless_suppression_on_method_parameter": "US: Useless suppression on a method parameter\nSuppressing annotations &SuppressFBWarnings should be removed from the source code as soon as they are no more needed. Leaving them may result in accidental warnings suppression. The annotation was probably added to suppress a warning raised by SpotBugs, but now SpotBugs does not report the bug anymore. Either the bug was solved or SpotBugs was updated, and the bug is no longer raised by that code.",
      "us_useless_suppression_on_package": "US: Useless suppression on a package\nSuppressing annotation &SuppressFBWarnings should be removed from the source code as soon as they are no more needed. Leaving them may result in accidental warnings suppression. The annotation was probably added to suppress a warning raised by SpotBugs, but now SpotBugs does not report the bug anymore. Either the bug was solved or SpotBugs was updated, and the bug is no longer raised by that code."
    }
  },
  "sourcefolder": {
    "error": {
      "nameRequired": "Folder name is required.",
      "pathRequired": "Folder path is required."
    }
  }
}
